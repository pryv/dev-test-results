[
  {
    "stats": {
      "suites": 163,
      "tests": 453,
      "passes": 453,
      "pending": 0,
      "failures": 0,
      "start": "2019-05-07T06:14:38.456Z",
      "end": "2019-05-07T06:15:56.793Z",
      "duration": 78337
    },
    "tests": [
      {
        "title": "[P12L] should contain deletions",
        "fullTitle": "access deletions when given a few existing accesses accesses.get [P12L] should contain deletions",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BQ7M] contains active accesses",
        "fullTitle": "access deletions when given a few existing accesses accesses.get [BQ7M] contains active accesses",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NVCQ] contains deleted accesses as well",
        "fullTitle": "access deletions when given a few existing accesses accesses.get [NVCQ] contains deleted accesses as well",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6ZQL] deleted access are in UTC (seconds) format",
        "fullTitle": "access deletions when given a few existing accesses accesses.get [6ZQL] deleted access are in UTC (seconds) format",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[N3Q1] should contain an access",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a valid access [N3Q1] should contain an access",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J77Z] should contain the set values, but no \"deleted\" field in the API response",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a valid access [J77Z] should contain the set values, but no \"deleted\" field in the API response",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A4JP] should contain the field \"deleted:null\" in the database",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a valid access [A4JP] should contain the field \"deleted:null\" in the database",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1DJ6] should return an error",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a deleted access [1DJ6] should return an error",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7ZPK] error should say that the deleted field is forbidden upon creation",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a deleted access [7ZPK] error should say that the deleted field is forbidden upon creation",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JNJK] should return an error",
        "fullTitle": "access deletions when given a few existing accesses accesses.update [JNJK] should return an error",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OS36] error should say that the deleted field is forbidden upon update",
        "fullTitle": "access deletions when given a few existing accesses accesses.update [OS36] error should say that the deleted field is forbidden upon update",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[489J] succeeds",
        "fullTitle": "access expiry when given a few existing accesses accesses.get vanilla version [489J] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7NPE] contains only active accesses",
        "fullTitle": "access expiry when given a few existing accesses accesses.get vanilla version [7NPE] contains only active accesses",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PIGE] succeeds",
        "fullTitle": "access expiry when given a few existing accesses accesses.get when given the includeExpired=true parameter [PIGE] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DZHL] includes expired accesses",
        "fullTitle": "access expiry when given a few existing accesses accesses.get when given the includeExpired=true parameter [DZHL] includes expired accesses",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3ONA] creates an access with set expiry timestamp",
        "fullTitle": "access expiry when given a few existing accesses accesses.create when called with expireAfter>0 [3ONA] creates an access with set expiry timestamp",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8B65] creates an expired access",
        "fullTitle": "access expiry when given a few existing accesses accesses.create when called with expireAfter=0 [8B65] creates an expired access",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JHWH] fails",
        "fullTitle": "access expiry when given a few existing accesses accesses.create when called with expireAfter<0 [JHWH] fails",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FMKA] sets the 'expires' attribute",
        "fullTitle": "access expiry when given a few existing accesses accesses.update with expireAfter>0 [FMKA] sets the 'expires' attribute",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TKKF] expires the access immediately",
        "fullTitle": "access expiry when given a few existing accesses accesses.update with expireAfter=0 [TKKF] expires the access immediately",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D80R] removes expiry",
        "fullTitle": "access expiry when given a few existing accesses accesses.update with expires=null [D80R] removes expiry",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IW8Y] fails",
        "fullTitle": "access expiry when given a few existing accesses accesses.update when trying to update itself with a longer expiration [IW8Y] fails",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[B66B] returns the matching access",
        "fullTitle": "access expiry when given a few existing accesses accesses.checkApp when the matching access is not expired [B66B] returns the matching access",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DLHJ] returns no match",
        "fullTitle": "access expiry when given a few existing accesses accesses.checkApp when the matching access is expired [DLHJ] returns no match",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AJG5] fails",
        "fullTitle": "access expiry when given a few existing accesses other API accesses using an expired access [AJG5] fails",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KGT4] returns a proper error message",
        "fullTitle": "access expiry when given a few existing accesses other API accesses using an expired access [KGT4] returns a proper error message",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CBRF] succeeds",
        "fullTitle": "access expiry when given a few existing accesses other API accesses using a valid access [CBRF] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KML2] succeeds",
        "fullTitle": "access client data when given a few existing accesses accesses.get [KML2] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NY85] contains existing accesses with clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.get [NY85] contains existing accesses with clientData",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OMUO] creates an access with empty clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.create when called with clientData={} [OMUO] creates an access with empty clientData",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[E5C1] throws a schema error",
        "fullTitle": "access client data when given a few existing accesses accesses.create when called with clientData=null [E5C1] throws a schema error",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JYD4] creates an access with complex clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.create when called with complex clientData [JYD4] creates an access with complex clientData",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IY9L] updates previous clientData with new clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.update if existing clientData was not empty [IY9L] updates previous clientData with new clientData",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SUT0] keeps existing clientData untouched",
        "fullTitle": "access client data when given a few existing accesses accesses.update if clientData is not provided [SUT0] keeps existing clientData untouched",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WC3I] sets clientData to provided clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.update if existing clientData was empty [WC3I] sets clientData to provided clientData",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2OUY] removes existing clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.update if provided clientData is explicitely null [2OUY] removes existing clientData",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U1AM] returns the matching access",
        "fullTitle": "access client data when given a few existing accesses accesses.checkApp when the provided clientData matches the existing clientData [U1AM] returns the matching access",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2EER] returns no match",
        "fullTitle": "access client data when given a few existing accesses accesses.checkApp when the provided clientData does not match the existing clientData [2EER] returns no match",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DHZQ] returns no match",
        "fullTitle": "access client data when given a few existing accesses accesses.checkApp when no clientData is provided but existing access has one [DHZQ] returns no match",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[80HI] succeeds",
        "fullTitle": "users pool create pool user [80HI] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y95U] contains a generated pool user id",
        "fullTitle": "users pool create pool user [Y95U] contains a generated pool user id",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JKN6] created a user in the database",
        "fullTitle": "users pool create pool user [JKN6] created a user in the database",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YB72] created the related collections",
        "fullTitle": "users pool create pool user [YB72] created the related collections",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WBCJ] created the related indexes",
        "fullTitle": "users pool create pool user [WBCJ] created the related indexes",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DHID] must succeed",
        "fullTitle": "users pool get pool size when empty [DHID] must succeed",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LH6N] must return 0",
        "fullTitle": "users pool get pool size when empty [LH6N] must return 0",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CTP7] succeeds",
        "fullTitle": "users pool get pool size when adding pool users [CTP7] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[APQS] has the right number of pool users",
        "fullTitle": "users pool get pool size when adding pool users [APQS] has the right number of pool users",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YEHW] must return shared accesses whose permissions are a subset of the current one's",
        "fullTitle": "accesses (app) GET / [YEHW] must return shared accesses whose permissions are a subset of the current one's",
        "duration": 82,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GLHP] must be forbidden to requests with a shared access token",
        "fullTitle": "accesses (app) GET / [GLHP] must be forbidden to requests with a shared access token",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QVHS] must create a new shared access with the sent data and return it",
        "fullTitle": "accesses (app) POST / [QVHS] must create a new shared access with the sent data and return it",
        "duration": 42,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6GR1] must forbid trying to create a non-shared access",
        "fullTitle": "accesses (app) POST / [6GR1] must forbid trying to create a non-shared access",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A4MC] must forbid trying to create an access with greater permissions",
        "fullTitle": "accesses (app) POST / [A4MC] must forbid trying to create an access with greater permissions",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QN6D] must return a correct error if the sent data is badly formatted",
        "fullTitle": "accesses (app) POST / [QN6D] must return a correct error if the sent data is badly formatted",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4HAE] must allow creation of shared accesses with an access that has superior permission on root stream (*)",
        "fullTitle": "accesses (app) POST / [4HAE] must allow creation of shared accesses with an access that has superior permission on root stream (*)",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ACUA] must modify the access with the sent data",
        "fullTitle": "accesses (app) PUT /<token> [ACUA] must modify the access with the sent data",
        "duration": 26,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[11UZ] must forbid trying to modify a non-shared access",
        "fullTitle": "accesses (app) PUT /<token> [11UZ] must forbid trying to modify a non-shared access",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3RJC] must forbid trying to modify an access with greater permissions",
        "fullTitle": "accesses (app) PUT /<token> [3RJC] must forbid trying to modify an access with greater permissions",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S7G3] must return a correct error if the access does not exist",
        "fullTitle": "accesses (app) PUT /<token> [S7G3] must return a correct error if the access does not exist",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VZBW] must return a correct error if the sent data is badly formatted",
        "fullTitle": "accesses (app) PUT /<token> [VZBW] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AZID] must return a correct error if an access with the same name already exists",
        "fullTitle": "accesses (app) PUT /<token> [AZID] must return a correct error if an access with the same name already exists",
        "duration": 21,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5BOO] must delete the shared access",
        "fullTitle": "accesses (app) DELETE /<token> [5BOO] must delete the shared access",
        "duration": 35,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VGQS] must forbid trying to delete a non-shared access",
        "fullTitle": "accesses (app) DELETE /<token> [VGQS] must forbid trying to delete a non-shared access",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZTSY] must forbid trying to delete an access with greater permissions",
        "fullTitle": "accesses (app) DELETE /<token> [ZTSY] must forbid trying to delete an access with greater permissions",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J32P] must return a correct error if the access does not exist",
        "fullTitle": "accesses (app) DELETE /<token> [J32P] must return a correct error if the access does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[K5BF] must return all accesses (including personal ones)",
        "fullTitle": "accesses (personal) GET / [K5BF] must return all accesses (including personal ones)",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BU9U] must create a new shared access with the sent data, returning it",
        "fullTitle": "accesses (personal) POST / [BU9U] must create a new shared access with the sent data, returning it",
        "duration": 37,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FPUE] must create a new app access with the sent data, creating/restoring requested streams",
        "fullTitle": "accesses (personal) POST / [FPUE] must create a new app access with the sent data, creating/restoring requested streams",
        "duration": 82,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[865I] must accept two app accesses with the same name (app ids) but different device names",
        "fullTitle": "accesses (personal) POST / [865I] must accept two app accesses with the same name (app ids) but different device names",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4Y3Y] must ignore erroneous requests to create new streams",
        "fullTitle": "accesses (personal) POST / [4Y3Y] must ignore erroneous requests to create new streams",
        "duration": 34,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WSG8] must fail if a stream similar to that requested for creation already exists",
        "fullTitle": "accesses (personal) POST / [WSG8] must fail if a stream similar to that requested for creation already exists",
        "duration": 21,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GVC7] must refuse to create new personal accesses (obtained via login only)",
        "fullTitle": "accesses (personal) POST / [GVC7] must refuse to create new personal accesses (obtained via login only)",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YRNE] must slugify the new access' predefined token",
        "fullTitle": "accesses (personal) POST / [YRNE] must slugify the new access' predefined token",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V3AV] must return an error if the sent data is badly formatted",
        "fullTitle": "accesses (personal) POST / [V3AV] must return an error if the sent data is badly formatted",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HETK] must refuse empty `defaultName` values for streams",
        "fullTitle": "accesses (personal) POST / [HETK] must refuse empty `defaultName` values for streams",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YG81] must return an error if an access with the same token already exists",
        "fullTitle": "accesses (personal) POST / [YG81] must return an error if an access with the same token already exists",
        "duration": 25,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GZTH] must return an error if an access with the same name already exists",
        "fullTitle": "accesses (personal) POST / [GZTH] must return an error if an access with the same name already exists",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4HO6] must return an error if an \"app\" access with the same name (app id) and device name already exists",
        "fullTitle": "accesses (personal) POST / [4HO6] must return an error if an \"app\" access with the same name (app id) and device name already exists",
        "duration": 21,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PO0R] must return an error if the device name is set for a non-app access",
        "fullTitle": "accesses (personal) POST / [PO0R] must return an error if the device name is set for a non-app access",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RWGG] must return an error if the given predefined access's token is a reserved word",
        "fullTitle": "accesses (personal) POST / [RWGG] must return an error if the given predefined access's token is a reserved word",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[66GW] must modify the shared access with the sent data",
        "fullTitle": "accesses (personal) PUT /<token> [66GW] must modify the shared access with the sent data",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[F67O] must modify the personal access with the specified data",
        "fullTitle": "accesses (personal) PUT /<token> [F67O] must modify the personal access with the specified data",
        "duration": 37,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U04A] must return an error if the access does not exist",
        "fullTitle": "accesses (personal) PUT /<token> [U04A] must return an error if the access does not exist",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P2UC] must return an error if the sent data is badly formatted",
        "fullTitle": "accesses (personal) PUT /<token> [P2UC] must return an error if the sent data is badly formatted",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KK1F] must return an error if an access with the same name and type already exists",
        "fullTitle": "accesses (personal) PUT /<token> [KK1F] must return an error if an access with the same name and type already exists",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4Y59] must prevent update of protected fields and throw a forbidden error in strict mode",
        "fullTitle": "accesses (personal) PUT /<token> forbidden updates of protected fields [4Y59] must prevent update of protected fields and throw a forbidden error in strict mode",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6KC8] must prevent update of protected fields and log a warning in non-strict mode",
        "fullTitle": "accesses (personal) PUT /<token> forbidden updates of protected fields [6KC8] must prevent update of protected fields and log a warning in non-strict mode",
        "duration": 1157,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[B8MA] must forbid to elevate a read level into a manage level using a contribute access ",
        "fullTitle": "accesses (personal) PUT /<token> forbidden updates of protected fields [B8MA] must forbid to elevate a read level into a manage level using a contribute access ",
        "duration": 67,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AMEV] must forbid to extend the permission streamIds beyond the authorized context ",
        "fullTitle": "accesses (personal) PUT /<token> forbidden updates of protected fields [AMEV] must forbid to extend the permission streamIds beyond the authorized context ",
        "duration": 63,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S8EK] must delete the shared access",
        "fullTitle": "accesses (personal) DELETE /<token> [S8EK] must delete the shared access",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5GBI] must delete the personal access",
        "fullTitle": "accesses (personal) DELETE /<token> [5GBI] must delete the personal access",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NN11] must return an error if the access does not exist",
        "fullTitle": "accesses (personal) DELETE /<token> [NN11] must return an error if the access does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VCH9] must return the adjusted permissions structure if no access exists",
        "fullTitle": "accesses (personal) POST /check-app [VCH9] must return the adjusted permissions structure if no access exists",
        "duration": 15,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R8H4] must accept requested permissions with \"*\" for \"all streams\"",
        "fullTitle": "accesses (personal) POST /check-app [R8H4] must accept requested permissions with \"*\" for \"all streams\"",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9QNK] must return the existing app access if matching",
        "fullTitle": "accesses (personal) POST /check-app [9QNK] must return the existing app access if matching",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IF33] must also return the token of the existing mismatching access if any",
        "fullTitle": "accesses (personal) POST /check-app [IF33] must also return the token of the existing mismatching access if any",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G5T2] must propose fixes to duplicate ids of streams and signal an error when appropriate",
        "fullTitle": "accesses (personal) POST /check-app [G5T2] must propose fixes to duplicate ids of streams and signal an error when appropriate",
        "duration": 13,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MTY1] must return an error if the sent data is badly formatted",
        "fullTitle": "accesses (personal) POST /check-app [MTY1] must return an error if the sent data is badly formatted",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U5KD] must be forbidden to non-personal accesses",
        "fullTitle": "accesses (personal) POST /check-app [U5KD] must be forbidden to non-personal accesses",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PHSB] must return the user's account details",
        "fullTitle": "account GET / [PHSB] must return the user's account details",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[K5EI] must be forbidden to non-personal accesses",
        "fullTitle": "account GET / [K5EI] must be forbidden to non-personal accesses",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0PPV] must modify account details with the sent data, notifying register if e-mail changed",
        "fullTitle": "account PUT / [0PPV] must modify account details with the sent data, notifying register if e-mail changed",
        "duration": 1265,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AT0V] must return a correct error if the sent data is badly formatted",
        "fullTitle": "account PUT / [AT0V] must return a correct error if the sent data is badly formatted",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NZE2] must be forbidden to non-personal accesses",
        "fullTitle": "account PUT / [NZE2] must be forbidden to non-personal accesses",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NFJQ] must properly compute used storage size for a given user when called",
        "fullTitle": "account storage space monitoring [NFJQ] must properly compute used storage size for a given user when called",
        "duration": 138,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y445] must properly compute storage size for all users in nightly script",
        "fullTitle": "account storage space monitoring [Y445] must properly compute storage size for all users in nightly script",
        "duration": 1124,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0QVH] must be approximately updated (diff) when adding an attached file",
        "fullTitle": "account storage space monitoring [0QVH] must be approximately updated (diff) when adding an attached file",
        "duration": 60,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[93AP] must be approximately updated (diff) when deleting an attached file",
        "fullTitle": "account storage space monitoring [93AP] must be approximately updated (diff) when deleting an attached file",
        "duration": 55,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5WO0] must be approximately updated (diff) when deleting an event",
        "fullTitle": "account storage space monitoring [5WO0] must be approximately updated (diff) when deleting an event",
        "duration": 86,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6041] must change the password to the given value",
        "fullTitle": "account /change-password [6041] must change the password to the given value",
        "duration": 282,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[STWH] must return an error if the given old password does not match",
        "fullTitle": "account /change-password [STWH] must return an error if the given old password does not match",
        "duration": 88,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8I1N] must return a correct error if the sent data is badly formatted",
        "fullTitle": "account /change-password [8I1N] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J5VH] must be forbidden to non-personal accesses",
        "fullTitle": "account /change-password [J5VH] must be forbidden to non-personal accesses",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G1VN] \"request\" must trigger an email with a reset token, store that token, then \"reset\" must reset the password to the given value",
        "fullTitle": "account /request-password-reset and /reset-password [G1VN] \"request\" must trigger an email with a reset token, store that token, then \"reset\" must reset the password to the given value",
        "duration": 1446,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HV0V] must not trigger a reset email if mailing is deactivated",
        "fullTitle": "account /request-password-reset and /reset-password [HV0V] must not trigger a reset email if mailing is deactivated",
        "duration": 1228,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VZ1W] must not trigger a reset email if reset mail is deactivated",
        "fullTitle": "account /request-password-reset and /reset-password [VZ1W] must not trigger a reset email if reset mail is deactivated",
        "duration": 1208,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3P2N] must not be possible to use a reset token to illegally change password of another user",
        "fullTitle": "account /request-password-reset and /reset-password [3P2N] must not be possible to use a reset token to illegally change password of another user",
        "duration": 27,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J6GB] \"request\" must return an error if the requesting app is not trusted",
        "fullTitle": "account /request-password-reset and /reset-password [J6GB] \"request\" must return an error if the requesting app is not trusted",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5K14] \"request\" must return an error if sent data is badly formatted",
        "fullTitle": "account /request-password-reset and /reset-password [5K14] \"request\" must return an error if sent data is badly formatted",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PKBP] \"reset\" must return an error if the reset token is invalid/expired",
        "fullTitle": "account /request-password-reset and /reset-password [PKBP] \"reset\" must return an error if the reset token is invalid/expired",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ON9V] \"reset\" must return an error if the requesting app is not trusted",
        "fullTitle": "account /request-password-reset and /reset-password [ON9V] \"reset\" must return an error if the requesting app is not trusted",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[T5L9] \"reset\" must return an error if sent data is badly formatted",
        "fullTitle": "account /request-password-reset and /reset-password [T5L9] \"reset\" must return an error if sent data is badly formatted",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RWIA] must not return history when calling events.get",
        "fullTitle": "Auditing Events [RWIA] must not return history when calling events.get",
        "duration": 48,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FLLW] must delete the event's history when deleting it with deletionMode=keep-nothing",
        "fullTitle": "Auditing Events deletionMode [FLLW] must delete the event's history when deleting it with deletionMode=keep-nothing",
        "duration": 1154,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6W0B] must minimize the event's history when deleting it with deletionMode=keep-authors",
        "fullTitle": "Auditing Events deletionMode [6W0B] must minimize the event's history when deleting it with deletionMode=keep-authors",
        "duration": 1139,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1DBC] must not modify the event's history when deleting it with deletionMode=keep-everything",
        "fullTitle": "Auditing Events deletionMode [1DBC] must not modify the event's history when deleting it with deletionMode=keep-everything",
        "duration": 1137,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YRI7] must not return an event's history when calling getOne with includeHistory flag off",
        "fullTitle": "Auditing Events getOne [YRI7] must not return an event's history when calling getOne with includeHistory flag off",
        "duration": 14,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KPQZ] must return an event's history when calling getOne with includeHistory flag on",
        "fullTitle": "Auditing Events getOne [KPQZ] must return an event's history when calling getOne with includeHistory flag on",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PKA9] must not generate history when updating an event",
        "fullTitle": "Auditing Events forceKeepHistory is OFF [PKA9] must not generate history when updating an event",
        "duration": 111,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TLG6] must not generate history of the running event that was stopped because of the start call on another event",
        "fullTitle": "Auditing Events forceKeepHistory is OFF [TLG6] must not generate history of the running event that was stopped because of the start call on another event",
        "duration": 53,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DZMK] must not generate history when no event was stopped in the procedure of the start call on another event",
        "fullTitle": "Auditing Events forceKeepHistory is OFF [DZMK] must not generate history when no event was stopped in the procedure of the start call on another event",
        "duration": 39,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MB48] must not generate history when calling stop on a running event",
        "fullTitle": "Auditing Events forceKeepHistory is OFF [MB48] must not generate history when calling stop on a running event",
        "duration": 48,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0P6S] must generate history when updating an event",
        "fullTitle": "Auditing Events forceKeepHistory is ON [0P6S] must generate history when updating an event",
        "duration": 178,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y4CH] must generate history of the running event that was stopped because of the start call on another event",
        "fullTitle": "Auditing Events forceKeepHistory is ON [Y4CH] must generate history of the running event that was stopped because of the start call on another event",
        "duration": 82,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[M90Z] must not generate history when no event was stopped in the procedure of the start call on another event",
        "fullTitle": "Auditing Events forceKeepHistory is ON [M90Z] must not generate history when no event was stopped in the procedure of the start call on another event",
        "duration": 41,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[519W] must generate history when calling stop on a running event",
        "fullTitle": "Auditing Events forceKeepHistory is ON [519W] must generate history when calling stop on a running event",
        "duration": 55,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H1PK] must generate events' history when their stream is deleted with  mergeEventsWithParents=true since their streamId is modified",
        "fullTitle": "Auditing Streams [H1PK] must generate events' history when their stream is deleted with  mergeEventsWithParents=true since their streamId is modified",
        "duration": 139,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[95TJ] must delete the events' history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-nothing'",
        "fullTitle": "Auditing Streams [95TJ] must delete the events' history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-nothing'",
        "duration": 1167,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4U91] must keep the events' minimal history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-authors'",
        "fullTitle": "Auditing Streams [4U91] must keep the events' minimal history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-authors'",
        "duration": 1166,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D4CY] must not delete the events' history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-everything'",
        "fullTitle": "Auditing Streams [D4CY] must not delete the events' history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-everything'",
        "duration": 1160,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2CV5] must authenticate the given credentials, open a session and return the access token",
        "fullTitle": "auth /login [2CV5] must authenticate the given credentials, open a session and return the access token",
        "duration": 148,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5UMP] must reuse the current session if already open",
        "fullTitle": "auth /login [5UMP] must reuse the current session if already open",
        "duration": 194,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[509A] must accept \"wildcarded\" app ids and origins",
        "fullTitle": "auth /login [509A] must accept \"wildcarded\" app ids and origins",
        "duration": 94,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ADL4] must accept \"no origin\" (i.e. not a CORS request) if authorized",
        "fullTitle": "auth /login [ADL4] must accept \"no origin\" (i.e. not a CORS request) if authorized",
        "duration": 114,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A7JL] must also accept \"referer\" in place of \"origin\" (e.g. some browsers do not provide \"origin\")",
        "fullTitle": "auth /login [A7JL] must also accept \"referer\" in place of \"origin\" (e.g. some browsers do not provide \"origin\")",
        "duration": 99,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IKNM] must also accept \"referer\" in place of \"origin\" (e.g. some browsers do not provide \"origin\")",
        "fullTitle": "auth /login [IKNM] must also accept \"referer\" in place of \"origin\" (e.g. some browsers do not provide \"origin\")",
        "duration": 98,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1TI6] must not be case-sensitive for the username",
        "fullTitle": "auth /login [1TI6] must not be case-sensitive for the username",
        "duration": 100,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L7JQ] must return a correct error when the local credentials are missing or invalid",
        "fullTitle": "auth /login [L7JQ] must return a correct error when the local credentials are missing or invalid",
        "duration": 88,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4AQR] must return a correct error if the app id is missing or untrusted",
        "fullTitle": "auth /login [4AQR] must return a correct error if the app id is missing or untrusted",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NDB0] must return a correct error if the origin is missing or does not match the app id",
        "fullTitle": "auth /login [NDB0] must return a correct error if the origin is missing or does not match the app id",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6PQR] must support concurrent login request",
        "fullTitle": "auth /login [6PQR] must support concurrent login request",
        "duration": 124,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9WHP] must not leak _private object from Result",
        "fullTitle": "auth /login [9WHP] must not leak _private object from Result",
        "duration": 94,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[C03J] must replace the password in the logs by (hidden) when an error occurs",
        "fullTitle": "auth /login when we log into a temporary log file [C03J] must replace the password in the logs by (hidden) when an error occurs",
        "duration": 156,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G0YT] must not mention the password in the logs when none is provided",
        "fullTitle": "auth /login when we log into a temporary log file [G0YT] must not mention the password in the logs when none is provided",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6W5M] must terminate the access session and fail to logout a second time (session already expired)",
        "fullTitle": "auth /logout [6W5M] must terminate the access session and fail to logout a second time (session already expired)",
        "duration": 213,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[E2MD] (or any request) must alternatively accept the access token in the query string",
        "fullTitle": "auth /logout [E2MD] (or any request) must alternatively accept the access token in the query string",
        "duration": 144,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TIDW] GET /who-am-i must return a 404 as it has been deprecated",
        "fullTitle": "auth SSO support [TIDW] GET /who-am-i must return a 404 as it has been deprecated",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6KLF] must set the SSO cookie on /login with the access token",
        "fullTitle": "auth SSO support when deprecated.auth.ssoIsWhoamiActivated is set [6KLF] must set the SSO cookie on /login with the access token",
        "duration": 166,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QT6T] must answer /who-am-i with username and session details if session open",
        "fullTitle": "auth SSO support when deprecated.auth.ssoIsWhoamiActivated is set [QT6T] must answer /who-am-i with username and session details if session open",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UNPB] must clear the SSO cookie on /logout",
        "fullTitle": "auth SSO support when deprecated.auth.ssoIsWhoamiActivated is set [UNPB] must clear the SSO cookie on /logout",
        "duration": 46,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5G0E] must respond /who-am-i with an \"unauthorized\" error if no cookie is sent",
        "fullTitle": "auth SSO support when deprecated.auth.ssoIsWhoamiActivated is set [5G0E] must respond /who-am-i with an \"unauthorized\" error if no cookie is sent",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WC8C] must return the last 20 non-trashed events (sorted descending) by default",
        "fullTitle": "events GET / [WC8C] must return the last 20 non-trashed events (sorted descending) by default",
        "duration": 106,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U8U9] must only return events for the given streams (incl. sub-streams) when set",
        "fullTitle": "events GET / [U8U9] must only return events for the given streams (incl. sub-streams) when set",
        "duration": 15,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S0M6] must return an error if some of the given streams do not exist",
        "fullTitle": "events GET / [S0M6] must return an error if some of the given streams do not exist",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R667] must only return events with the given tag when set",
        "fullTitle": "events GET / [R667] must only return events with the given tag when set",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KNJY] must only return events with any of the given tags when set",
        "fullTitle": "events GET / [KNJY] must only return events with any of the given tags when set",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QR4I] must only return events of any of the given types when set",
        "fullTitle": "events GET / [QR4I] must only return events of any of the given types when set",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TWP8] must (unofficially) support a wildcard for event types",
        "fullTitle": "events GET / [TWP8] must (unofficially) support a wildcard for event types",
        "duration": 17,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7MOU] must only return events in the given time period sorted ascending when set",
        "fullTitle": "events GET / [7MOU] must only return events in the given time period sorted ascending when set",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[W5IT] must take into account fromTime and toTime even if set to 0",
        "fullTitle": "events GET / [W5IT] must take into account fromTime and toTime even if set to 0",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y6SY] must take into account modifiedSince even if set to 0",
        "fullTitle": "events GET / [Y6SY] must take into account modifiedSince even if set to 0",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QNDP] must properly exclude period events completed before the given period",
        "fullTitle": "events GET / [QNDP] must properly exclude period events completed before the given period",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5UFW] must return ongoing events started before the given time period",
        "fullTitle": "events GET / [5UFW] must return ongoing events started before the given time period",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S9J4] must only return events in the given paging range when set",
        "fullTitle": "events GET / [S9J4] must only return events in the given paging range when set",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[915E] must return only trashed events when requested",
        "fullTitle": "events GET / [915E] must return only trashed events when requested",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6H0Z] must return all events (trashed or not) when requested",
        "fullTitle": "events GET / [6H0Z] must return all events (trashed or not) when requested",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JZYF] must return only events modified since the given time when requested",
        "fullTitle": "events GET / [JZYF] must return only events modified since the given time when requested",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[B766] must include event deletions (since that time) when requested",
        "fullTitle": "events GET / [B766] must include event deletions (since that time) when requested",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V72A] must only return running period event(s) when requested",
        "fullTitle": "events GET / [V72A] must only return running period event(s) when requested",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[68IL] must return an error if no access token is provided",
        "fullTitle": "events GET / [68IL] must return an error if no access token is provided",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[F29M] must return the attached file with the correct headers",
        "fullTitle": "events GET /<event id>/<file id> [F29M] must return the attached file with the correct headers",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NL65] must accept a secure read token in the query string instead of the `\"Authorization\" header",
        "fullTitle": "events GET /<event id>/<file id> [NL65] must accept a secure read token in the query string instead of the `\"Authorization\" header",
        "duration": 17,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TN27] must allow a filename path suffix after the file id",
        "fullTitle": "events GET /<event id>/<file id> [TN27] must allow a filename path suffix after the file id",
        "duration": 16,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LOUB] must allow any filename (including special characters)",
        "fullTitle": "events GET /<event id>/<file id> [LOUB] must allow any filename (including special characters)",
        "duration": 16,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9NJ0] must refuse an invalid file read token",
        "fullTitle": "events GET /<event id>/<file id> [9NJ0] must refuse an invalid file read token",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9HNM] must refuse auth via the regular \"auth\" query string parameter",
        "fullTitle": "events GET /<event id>/<file id> [9HNM] must refuse auth via the regular \"auth\" query string parameter",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MMCZ] must return a proper error if trying to get an unknown attachment",
        "fullTitle": "events GET /<event id>/<file id> [MMCZ] must return a proper error if trying to get an unknown attachment",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1GR6] must create an event with the sent data, returning it",
        "fullTitle": "events POST / [1GR6] must create an event with the sent data, returning it",
        "duration": 47,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QSBV] must set the event's time to \"now\" if missing",
        "fullTitle": "events POST / [QSBV] must set the event's time to \"now\" if missing",
        "duration": 38,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6BVW] must accept explicit null for optional fields",
        "fullTitle": "events POST / [6BVW] must accept explicit null for optional fields",
        "duration": 37,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D2TH] must refuse events with no stream id",
        "fullTitle": "events POST / [D2TH] must refuse events with no stream id",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WN86] must return a correct error if an event with the same id already exists",
        "fullTitle": "events POST / [WN86] must return a correct error if an event with the same id already exists",
        "duration": 20,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[94PW] must not allow reuse of deleted ids (unlike streams)",
        "fullTitle": "events POST / [94PW] must not allow reuse of deleted ids (unlike streams)",
        "duration": 20,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DRFA] must only allow ids that are formatted like cuids",
        "fullTitle": "events POST / [DRFA] must only allow ids that are formatted like cuids",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O7Y2] must reject tags that are too long",
        "fullTitle": "events POST / [O7Y2] must reject tags that are too long",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2885] must fix the tags to an empty array if not set",
        "fullTitle": "events POST / [2885] must fix the tags to an empty array if not set",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0IHM] must try casting string event content to number if appropriate",
        "fullTitle": "events POST / [0IHM] must try casting string event content to number if appropriate",
        "duration": 35,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H7CN] must not stop the running period event if the new event is a mark event (single activity)",
        "fullTitle": "events POST / [H7CN] must not stop the running period event if the new event is a mark event (single activity)",
        "duration": 42,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UL6Y] must not stop the running period event if the stream allows overlapping",
        "fullTitle": "events POST / [UL6Y] must not stop the running period event if the stream allows overlapping",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FZ4T] must validate the event's content if its type is known",
        "fullTitle": "events POST / [FZ4T] must validate the event's content if its type is known",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EL88] must not fail when validating the content if passing a string instead of an object",
        "fullTitle": "events POST / [EL88] must not fail when validating the content if passing a string instead of an object",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JUM6] must return an error if the sent data is badly formatted",
        "fullTitle": "events POST / [JUM6] must return an error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5NEL] must return an error if the associated stream is unknown",
        "fullTitle": "events POST / [5NEL] must return an error if the associated stream is unknown",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1GGK] must return an error if the event's period overlaps existing periods (single activity)",
        "fullTitle": "events POST / [1GGK] must return an error if the event's period overlaps existing periods (single activity)",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3S2T] must allow the event's period overlapping existing periods when the stream allows it",
        "fullTitle": "events POST / [3S2T] must allow the event's period overlapping existing periods when the stream allows it",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q0L6] must return an error if the assigned stream is trashed",
        "fullTitle": "events POST / [Q0L6] must return an error if the assigned stream is trashed",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WUSC] must not fail (500) when sending an array instead of an object",
        "fullTitle": "events POST / [WUSC] must not fail (500) when sending an array instead of an object",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5C8J] must create a running period event stopping any previously running event (single activity)",
        "fullTitle": "events POST /start [5C8J] must create a running period event stopping any previously running event (single activity)",
        "duration": 57,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JHUM] must return an error if a period event already exists later (single activity)",
        "fullTitle": "events POST /start [JHUM] must return an error if a period event already exists later (single activity)",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7FJZ] must allow starting an event before an existing period when the stream allows overlapping",
        "fullTitle": "events POST /start [7FJZ] must allow starting an event before an existing period when the stream allows overlapping",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4CUV] must create a new event with the uploaded files",
        "fullTitle": "events POST / (multipart content) [4CUV] must create a new event with the uploaded files",
        "duration": 104,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HROI] must properly handle part names containing special chars (e.g. \".\", \"$\")",
        "fullTitle": "events POST / (multipart content) [HROI] must properly handle part names containing special chars (e.g. \".\", \"$\")",
        "duration": 75,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0QGV] must return an error if the non-file content part is not JSON",
        "fullTitle": "events POST / (multipart content) [0QGV] must return an error if the non-file content part is not JSON",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R8ER] must return an error if there is more than one non-file content part",
        "fullTitle": "events POST / (multipart content) [R8ER] must return an error if there is more than one non-file content part",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZI01] must add the uploaded files to the event as attachments",
        "fullTitle": "events POST /<event id> (multipart content) [ZI01] must add the uploaded files to the event as attachments",
        "duration": 65,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EUZM] must add the uploaded files to the event without replacing existing attachments",
        "fullTitle": "events POST /<event id> (multipart content) [EUZM] must add the uploaded files to the event without replacing existing attachments",
        "duration": 64,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8GSS] allows access at level=read",
        "fullTitle": "events GET /<id> [8GSS] allows access at level=read",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IBO4] denies access without authorization",
        "fullTitle": "events GET /<id> [IBO4] denies access without authorization",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4QRU] must modify the event with the sent data",
        "fullTitle": "events PUT /<id> [4QRU] must modify the event with the sent data",
        "duration": 39,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6B05] must add/update/remove the specified client data fields without touching the others",
        "fullTitle": "events PUT /<id> [6B05] must add/update/remove the specified client data fields without touching the others",
        "duration": 38,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[C9GL] must return the id of the stopped previously running event if any (single activity)",
        "fullTitle": "events PUT /<id> [C9GL] must return the id of the stopped previously running event if any (single activity)",
        "duration": 46,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FM3G] must accept explicit null for optional fields",
        "fullTitle": "events PUT /<id> [FM3G] must accept explicit null for optional fields",
        "duration": 46,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BS75] must validate the event's content if its type is known",
        "fullTitle": "events PUT /<id> [BS75] must validate the event's content if its type is known",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FU83] must return an error if the event does not exist",
        "fullTitle": "events PUT /<id> [FU83] must return an error if the event does not exist",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[W2QL] must return an error if the sent data is badly formatted",
        "fullTitle": "events PUT /<id> [W2QL] must return an error if the sent data is badly formatted",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[01B2] must return an error if the associated stream is unknown",
        "fullTitle": "events PUT /<id> [01B2] must return an error if the associated stream is unknown",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SPN1] must return an error if moving a running period event before another existing period event (single activity)",
        "fullTitle": "events PUT /<id> [SPN1] must return an error if moving a running period event before another existing period event (single activity)",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FPEE] must return an error if the event's new period overlaps other events's (single activity)",
        "fullTitle": "events PUT /<id> [FPEE] must return an error if the event's new period overlaps other events's (single activity)",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CUM3] must reject tags that are too long",
        "fullTitle": "events PUT /<id> [CUM3] must reject tags that are too long",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L15U] must prevent update of protected fields and throw a forbidden error in strict mode",
        "fullTitle": "events PUT /<id> forbidden updates of protected fields [L15U] must prevent update of protected fields and throw a forbidden error in strict mode",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6NZ7] must prevent update of protected fields and log a warning in non-strict mode",
        "fullTitle": "events PUT /<id> forbidden updates of protected fields [6NZ7] must prevent update of protected fields and log a warning in non-strict mode",
        "duration": 1132,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VE5N] must stop the previously running period event, returning its id (single activity)",
        "fullTitle": "events POST /stop [VE5N] must stop the previously running period event, returning its id (single activity)",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HYQ3] must stop the last running event of the given type when specified",
        "fullTitle": "events POST /stop [HYQ3] must stop the last running event of the given type when specified",
        "duration": 60,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7NH0] must accept an `id` param to specify the event to stop",
        "fullTitle": "events POST /stop [7NH0] must accept an `id` param to specify the event to stop",
        "duration": 62,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GPSM] must return an error if the specified event does not exist",
        "fullTitle": "events POST /stop [GPSM] must return an error if the specified event does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0Y4J] must return an error if the specified event is not running",
        "fullTitle": "events POST /stop [0Y4J] must return an error if the specified event is not running",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KN22] must return an error if no event is specified and the stream allows overlapping",
        "fullTitle": "events POST /stop [KN22] must return an error if no event is specified and the stream allows overlapping",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BMC6] must return an error if neither stream nor event is specified",
        "fullTitle": "events POST /stop [BMC6] must return an error if neither stream nor event is specified",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RW8M] must delete the attachment (reference in event + file)",
        "fullTitle": "events DELETE /<event id>/<file id> [RW8M] must delete the attachment (reference in event + file)",
        "duration": 53,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZLZN] must return an error if not existing",
        "fullTitle": "events DELETE /<event id>/<file id> [ZLZN] must return an error if not existing",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AT5Y] must flag the event as trashed",
        "fullTitle": "events DELETE /<id> [AT5Y] must flag the event as trashed",
        "duration": 38,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[73CD] must delete the event when already trashed including all its attachments",
        "fullTitle": "events DELETE /<id> [73CD] must delete the event when already trashed including all its attachments",
        "duration": 70,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TNKS] must return all followed slices (ordered by user name, then access token)",
        "fullTitle": "followed slices GET / [TNKS] must return all followed slices (ordered by user name, then access token)",
        "duration": 47,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U9M4] must be forbidden to non-personal accesses",
        "fullTitle": "followed slices GET / [U9M4] must be forbidden to non-personal accesses",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HVYA] must create a new followed slice with the sent data, returning it",
        "fullTitle": "followed slices POST / [HVYA] must create a new followed slice with the sent data, returning it",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BULL] must return a correct error if the sent data is badly formatted",
        "fullTitle": "followed slices POST / [BULL] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GPZK] must return a correct error if the same followed slice (url and token) already exists",
        "fullTitle": "followed slices POST / [GPZK] must return a correct error if the same followed slice (url and token) already exists",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RYNB] must return a correct error if a followed slice with the same name already exists",
        "fullTitle": "followed slices POST / [RYNB] must return a correct error if a followed slice with the same name already exists",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LM08] must modify the followed slice with the sent data",
        "fullTitle": "followed slices PUT /<id> [LM08] must modify the followed slice with the sent data",
        "duration": 34,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QFGH] must return a correct error if the followed slice does not exist",
        "fullTitle": "followed slices PUT /<id> [QFGH] must return a correct error if the followed slice does not exist",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RUQE] must return a correct error if the sent data is badly formatted",
        "fullTitle": "followed slices PUT /<id> [RUQE] must return a correct error if the sent data is badly formatted",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[T256] must return a correct error if a followed slice with the same name already exists",
        "fullTitle": "followed slices PUT /<id> [T256] must return a correct error if a followed slice with the same name already exists",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U7LY] must delete the followed slice",
        "fullTitle": "followed slices DELETE /<id> [U7LY] must delete the followed slice",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UATV] must return a correct error if the followed slice does not exist",
        "fullTitle": "followed slices DELETE /<id> [UATV] must return a correct error if the followed slice does not exist",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DMGV] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with streams schema [DMGV] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Z51K] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with streams schema [Z51K] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EUKL] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with streams schema [EUKL] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0RQM] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with events schema [0RQM] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6TK9] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with events schema [6TK9] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IJ4M] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with events schema [IJ4M] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GP6C] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with accesses schema [GP6C] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MUC0] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with accesses schema [MUC0] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QGDA] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with accesses schema [QGDA] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HGVD] should throw an error if mailing method is invalid",
        "fullTitle": "Mailing helper methods [HGVD] should throw an error if mailing method is invalid",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OKQ2] should throw an error if mailing method is missing",
        "fullTitle": "Mailing helper methods [OKQ2] should throw an error if mailing method is missing",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GU60] should not be empty",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [GU60] should not be empty",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8JJU] should contain a valid auth key",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [8JJU] should contain a valid auth key",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G906] should contain a valid recipient",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [G906] should contain a valid recipient",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KBE0] should contain a valid substitution of variables",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [KBE0] should contain a valid substitution of variables",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2ABY] should contain valid tags",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [2ABY] should contain valid tags",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LHCB] should not be empty",
        "fullTitle": "Mailing helper methods using Microservice validating request body [LHCB] should not be empty",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9UEU] should contain a valid auth key",
        "fullTitle": "Mailing helper methods using Microservice validating request body [9UEU] should contain a valid auth key",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1Y6K] should contain a valid recipient",
        "fullTitle": "Mailing helper methods using Microservice validating request body [1Y6K] should contain a valid recipient",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UT8M] should contain a valid substitution of variables",
        "fullTitle": "Mailing helper methods using Microservice validating request body [UT8M] should contain a valid substitution of variables",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TWNI] must return an array preceded by a comma when called with parameter isFirst=false",
        "fullTitle": "ArrayStream [TWNI] must return an array preceded by a comma when called with parameter isFirst=false",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U21Z] must return a valid array when receiving limit-3 items",
        "fullTitle": "ArrayStream testing around the array size limit [U21Z] must return a valid array when receiving limit-3 items",
        "duration": 29,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MKNL] must return a valid array when receiving limit-2 items",
        "fullTitle": "ArrayStream testing around the array size limit [MKNL] must return a valid array when receiving limit-2 items",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MUPF] must return a valid array when receiving limit-1 items",
        "fullTitle": "ArrayStream testing around the array size limit [MUPF] must return a valid array when receiving limit-1 items",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CM4Q] must return a valid array when receiving limit+0 items",
        "fullTitle": "ArrayStream testing around the array size limit [CM4Q] must return a valid array when receiving limit+0 items",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[F8S9] must return a valid array when receiving limit+1 items",
        "fullTitle": "ArrayStream testing around the array size limit [F8S9] must return a valid array when receiving limit+1 items",
        "duration": 14,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6T4V] must return a valid array when receiving limit+2 items",
        "fullTitle": "ArrayStream testing around the array size limit [6T4V] must return a valid array when receiving limit+2 items",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QBOS] must return a valid array when receiving limit+3 items",
        "fullTitle": "ArrayStream testing around the array size limit [QBOS] must return a valid array when receiving limit+3 items",
        "duration": 14,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[69F6] must return a valid array when receiving 0 item(s)",
        "fullTitle": "ArrayStream testing with small number of items [69F6] must return a valid array when receiving 0 item(s)",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BJRT] must return a valid array when receiving 1 item(s)",
        "fullTitle": "ArrayStream testing with small number of items [BJRT] must return a valid array when receiving 1 item(s)",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YJI0] must return a valid array when receiving 2 item(s)",
        "fullTitle": "ArrayStream testing with small number of items [YJI0] must return a valid array when receiving 2 item(s)",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EKQQ] must return a valid array when receiving 3 item(s)",
        "fullTitle": "ArrayStream testing with small number of items [EKQQ] must return a valid array when receiving 3 item(s)",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AFWR] must be fed objects and return them in the callback",
        "fullTitle": "DrainStream [AFWR] must be fed objects and return them in the callback",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[23UQ] must return an error when the provided limit is exceeded",
        "fullTitle": "DrainStream [23UQ] must return an error when the provided limit is exceeded",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1AK1] `get` must only return events in accessible streams",
        "fullTitle": "Access permissions Events [1AK1] `get` must only return events in accessible streams",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NKI5] `get` must return all events when permissions are defined for \"all streams\" (*)",
        "fullTitle": "Access permissions Events [NKI5] `get` must return all events when permissions are defined for \"all streams\" (*)",
        "duration": 14,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FZ97] `get` must only return events with accessible tags",
        "fullTitle": "Access permissions Events [FZ97] `get` must only return events with accessible tags",
        "duration": 16,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1DH6] `get` must only return events in accessible streams *and* with accessible tags when both are defined",
        "fullTitle": "Access permissions Events [1DH6] `get` must only return events in accessible streams *and* with accessible tags when both are defined",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5360] `get` (or any request) must alternatively accept the access token in the query string",
        "fullTitle": "Access permissions Events [5360] `get` (or any request) must alternatively accept the access token in the query string",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KTM1] must forbid getting an attached file if permissions are insufficient",
        "fullTitle": "Access permissions Events [KTM1] must forbid getting an attached file if permissions are insufficient",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2773] must forbid creating events for 'read-only' streams",
        "fullTitle": "Access permissions Events [2773] must forbid creating events for 'read-only' streams",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y0TI] must forbid creating events for 'read-only' tags",
        "fullTitle": "Access permissions Events [Y0TI] must forbid creating events for 'read-only' tags",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZKZZ] must forbid updating events for 'read-only' streams",
        "fullTitle": "Access permissions Events [ZKZZ] must forbid updating events for 'read-only' streams",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9LKQ] must forbid updating events for 'read-only' tags",
        "fullTitle": "Access permissions Events [9LKQ] must forbid updating events for 'read-only' tags",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RHFS] must forbid stopping events for 'read-only' streams",
        "fullTitle": "Access permissions Events [RHFS] must forbid stopping events for 'read-only' streams",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3SGZ] must forbid stopping events for 'read-only' tags",
        "fullTitle": "Access permissions Events [3SGZ] must forbid stopping events for 'read-only' tags",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4H62] must forbid deleting events for 'read-only' streams",
        "fullTitle": "Access permissions Events [4H62] must forbid deleting events for 'read-only' streams",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GBKV] must forbid deleting events for 'read-only' tags",
        "fullTitle": "Access permissions Events [GBKV] must forbid deleting events for 'read-only' tags",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y38T] must allow creating events for 'contribute' streams",
        "fullTitle": "Access permissions Events [Y38T] must allow creating events for 'contribute' streams",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NIDD] must allow creating events for 'contribute' tags",
        "fullTitle": "Access permissions Events [NIDD] must allow creating events for 'contribute' tags",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BSFP] `get` must only return streams for which permissions are defined",
        "fullTitle": "Access permissions Streams [BSFP] `get` must only return streams for which permissions are defined",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R4IA] must forbid creating child streams in 'read-only' streams",
        "fullTitle": "Access permissions Streams [R4IA] must forbid creating child streams in 'read-only' streams",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KHI7] must forbid creating child streams in 'contribute' streams",
        "fullTitle": "Access permissions Streams [KHI7] must forbid creating child streams in 'contribute' streams",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MCDP] must forbid deleting child streams in 'contribute' streams",
        "fullTitle": "Access permissions Streams [MCDP] must forbid deleting child streams in 'contribute' streams",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7B6P] must forbid updating 'contribute' streams",
        "fullTitle": "Access permissions Streams [7B6P] must forbid updating 'contribute' streams",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RG5R] must forbid deleting 'contribute' streams",
        "fullTitle": "Access permissions Streams [RG5R] must forbid deleting 'contribute' streams",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O1AZ] must allow creating child streams in 'managed' streams",
        "fullTitle": "Access permissions Streams [O1AZ] must allow creating child streams in 'managed' streams",
        "duration": 34,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5QPU] must forbid moving streams into non-'managed' parent streams",
        "fullTitle": "Access permissions Streams [5QPU] must forbid moving streams into non-'managed' parent streams",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KP1Q] must allow deleting child streams in 'managed' streams",
        "fullTitle": "Access permissions Streams [KP1Q] must allow deleting child streams in 'managed' streams",
        "duration": 25,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HHSS] must recursively apply permissions to the streams' child streams",
        "fullTitle": "Access permissions Streams [HHSS] must recursively apply permissions to the streams' child streams",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NJ1A] must allow access to all streams when no specific stream permissions are defined",
        "fullTitle": "Access permissions Streams [NJ1A] must allow access to all streams when no specific stream permissions are defined",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZGK0] must allow access to all streams when only tag permissions are defined",
        "fullTitle": "Access permissions Streams [ZGK0] must allow access to all streams when only tag permissions are defined",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UYB2] must only allow access to set streams when both tag and stream permissions are defined",
        "fullTitle": "Access permissions Streams [UYB2] must only allow access to set streams when both tag and stream permissions are defined",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YE49] must handle optional caller id in auth (in addition to token)",
        "fullTitle": "Access permissions Auth and change tracking [YE49] must handle optional caller id in auth (in addition to token)",
        "duration": 24,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IA9K] must be supported and deny access when failing",
        "fullTitle": "Access permissions Auth and change tracking custom auth step (e.g. to validate/parse caller id) [IA9K] must be supported and deny access when failing",
        "duration": 74,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H58R] must allow access when successful",
        "fullTitle": "Access permissions Auth and change tracking custom auth step (e.g. to validate/parse caller id) [H58R] must allow access when successful",
        "duration": 35,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ISE4] must fail properly (i.e. not granting access) when the custom function crashes",
        "fullTitle": "Access permissions Auth and change tracking custom auth step (e.g. to validate/parse caller id) [ISE4] must fail properly (i.e. not granting access) when the custom function crashes",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P4OM] must validate the custom function at startup time",
        "fullTitle": "Access permissions Auth and change tracking custom auth step (e.g. to validate/parse caller id) [P4OM] must validate the custom function at startup time",
        "duration": 614,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FWG1] must return publicly shared key-value profile info",
        "fullTitle": "profile (app) GET /public [FWG1] must return publicly shared key-value profile info",
        "duration": 56,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[13DL] must return key-value settings for the current app",
        "fullTitle": "profile (app) GET /app [13DL] must return key-value settings for the current app",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J37U] must refuse requests with a shared access token",
        "fullTitle": "profile (app) GET /app [J37U] must refuse requests with a shared access token",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GYBN] must refuse requests with a personal access token",
        "fullTitle": "profile (app) GET /app [GYBN] must refuse requests with a personal access token",
        "duration": 121,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1QFB] must add/update/remove the specified keys without touching the others",
        "fullTitle": "profile (app) PUT /app [1QFB] must add/update/remove the specified keys without touching the others",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0H9A] must refuse requests with a shared access token",
        "fullTitle": "profile (app) PUT /app [0H9A] must refuse requests with a shared access token",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JC5F] must refuse requests with a personal access token",
        "fullTitle": "profile (app) PUT /app [JC5F] must refuse requests with a personal access token",
        "duration": 101,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J61R] /public must return publicly shared key-value profile info",
        "fullTitle": "profile (personal) GET [J61R] /public must return publicly shared key-value profile info",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HIMS] /private must return private key-value profile info",
        "fullTitle": "profile (personal) GET [HIMS] /private must return private key-value profile info",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[36B1] must return an appropriate error for other paths",
        "fullTitle": "profile (personal) GET [36B1] must return an appropriate error for other paths",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FUJA] \"private\" must be forbidden to non-personal accesses",
        "fullTitle": "profile (personal) GET [FUJA] \"private\" must be forbidden to non-personal accesses",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[M28R] /public must add/update/remove the specified keys without touching the others",
        "fullTitle": "profile (personal) PUT [M28R] /public must add/update/remove the specified keys without touching the others",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WU9C] /private must add/update/remove the specified keys without touching the others",
        "fullTitle": "profile (personal) PUT [WU9C] /private must add/update/remove the specified keys without touching the others",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2AS6] must create the profile if not existing",
        "fullTitle": "profile (personal) PUT [2AS6] must create the profile if not existing",
        "duration": 51,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q99E] must return an appropriate error for other paths",
        "fullTitle": "profile (personal) PUT [Q99E] must return an appropriate error for other paths",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[T565] must be forbidden to non-personal accesses",
        "fullTitle": "profile (personal) PUT [T565] must be forbidden to non-personal accesses",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NKHF] must return the result's content when not storing streams",
        "fullTitle": "Result toObject() [NKHF] must return the result's content when not storing streams",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MHAS] must return the result content when storing streams",
        "fullTitle": "Result toObject() [MHAS] must return the result content when storing streams",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6P4Z] must return an error object when attempting to serialize streams containing an amountof objects exceeding the limit",
        "fullTitle": "Result toObject() [6P4Z] must return an error object when attempting to serialize streams containing an amountof objects exceeding the limit",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TTEL] must return an error when storing piped streams",
        "fullTitle": "Result toObject() [TTEL] must return an error when storing piped streams",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UA7B] should return basic server meta information as JSON when requested",
        "fullTitle": "root GET / [UA7B] should return basic server meta information as JSON when requested",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TO50] should return basic server meta information as text otherwise",
        "fullTitle": "root GET / [TO50] should return basic server meta information as text otherwise",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TS3D] should return an error if trying to access an unknown user account",
        "fullTitle": "root GET / [TS3D] should return an error if trying to access an unknown user account",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TJHO] should return correct common HTTP headers + meta data in response body",
        "fullTitle": "root All requests: [TJHO] should return correct common HTTP headers + meta data in response body",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OQ3G] should return meta data in response body for errors as well",
        "fullTitle": "root All requests: [OQ3G] should return meta data in response body for errors as well",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P06Y] should properly translate the Host header's username (i.e. subdomain)",
        "fullTitle": "root All requests: [P06Y] should properly translate the Host header's username (i.e. subdomain)",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R3H5] should translate the username in subdomain also when it only contains numbers",
        "fullTitle": "root All requests: [R3H5] should translate the username in subdomain also when it only contains numbers",
        "duration": 109,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5IQK] should support POSTing \"urlencoded\" content with _json and _auth fields",
        "fullTitle": "root All requests: [5IQK] should support POSTing \"urlencoded\" content with _json and _auth fields",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2YEI] should support POSTing \"urlencoded\" content with _json, _method (PUT) and _auth fields",
        "fullTitle": "root All requests: [2YEI] should support POSTing \"urlencoded\" content with _json, _method (PUT) and _auth fields",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VJTP] should support POSTing \"urlencoded\" content with _json, _method (DELETE) and _auth fields",
        "fullTitle": "root All requests: [VJTP] should support POSTing \"urlencoded\" content with _json, _method (DELETE) and _auth fields",
        "duration": 56,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6D5O] should properly handle JSON errors when POSTing \"urlencoded\" content with _json field",
        "fullTitle": "root All requests: [6D5O] should properly handle JSON errors when POSTing \"urlencoded\" content with _json field",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J2WP] should update the access's \"last used\" time and *internal* request counters",
        "fullTitle": "root All requests: [J2WP] should update the access's \"last used\" time and *internal* request counters",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PDMA] should return OK",
        "fullTitle": "root OPTIONS / [PDMA] should return OK",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0MI8] must return current access information",
        "fullTitle": "root GET /access-info [0MI8] must return current access information",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ORT3] must execute the given method calls and return the results",
        "fullTitle": "root POST / (i.e. batch call) [ORT3] must execute the given method calls and return the results",
        "duration": 80,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TVPI] must execute the method calls containing events.get and return the results",
        "fullTitle": "root POST / (i.e. batch call) [TVPI] must execute the method calls containing events.get and return the results",
        "duration": 67,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WGVY] must return an error if the sent data is badly formatted",
        "fullTitle": "root POST / (i.e. batch call) [WGVY] must return an error if the sent data is badly formatted",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[25M0] must dynamically create a namespace for the user",
        "fullTitle": "Socket.IO [25M0] must dynamically create a namespace for the user",
        "duration": 41,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VGKH] must connect to a user with a dash in the username",
        "fullTitle": "Socket.IO [VGKH] must connect to a user with a dash in the username",
        "duration": 154,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OSOT] must refuse connection if no valid access token is provided",
        "fullTitle": "Socket.IO [OSOT] must refuse connection if no valid access token is provided",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FI6F] must properly route method call messages for events and return the results, including meta",
        "fullTitle": "Socket.IO calling API methods [FI6F] must properly route method call messages for events and return the results, including meta",
        "duration": 20,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O3SW] must properly route method call messages for streams and return the results",
        "fullTitle": "Socket.IO calling API methods [O3SW] must properly route method call messages for streams and return the results",
        "duration": 13,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NGUZ] must not crash when callers omit the callback",
        "fullTitle": "Socket.IO calling API methods [NGUZ] must not crash when callers omit the callback",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ACA3] must fail if the called target does not exist",
        "fullTitle": "Socket.IO calling API methods [ACA3] must fail if the called target does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L8WJ] must fail if the called method does not exist",
        "fullTitle": "Socket.IO calling API methods [L8WJ] must fail if the called method does not exist",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SNCW] must return API errors properly, including meta",
        "fullTitle": "Socket.IO calling API methods [SNCW] must return API errors properly, including meta",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[744Z] must notify other sockets for the same user about events changes",
        "fullTitle": "Socket.IO calling API methods [744Z] must notify other sockets for the same user about events changes",
        "duration": 38,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GJLT] must notify other sockets for the same user (only) about streams changes",
        "fullTitle": "Socket.IO calling API methods [GJLT] must notify other sockets for the same user (only) about streams changes",
        "duration": 104,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JC99] must notify on each change",
        "fullTitle": "Socket.IO calling API methods [JC99] must notify on each change",
        "duration": 58,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JJRA] changes made in A notify clients of B",
        "fullTitle": "Socket.IO when spawning 2 api-server processes, A and B [JJRA] changes made in A notify clients of B",
        "duration": 130,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TG78] must return non-trashed streams (as a tree) by default",
        "fullTitle": "streams GET / [TG78] must return non-trashed streams (as a tree) by default",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DPWG] must return all streams (trashed or not) when requested",
        "fullTitle": "streams GET / [DPWG] must return all streams (trashed or not) when requested",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RDD5] must include stream deletions (since the given time) when requested",
        "fullTitle": "streams GET / [RDD5] must include stream deletions (since the given time) when requested",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[T8AM] must include stream deletions even when the given time is 0",
        "fullTitle": "streams GET / [T8AM] must include stream deletions even when the given time is 0",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[W9VC] must return a correct 401 error if no access token is provided",
        "fullTitle": "streams GET / [W9VC] must return a correct 401 error if no access token is provided",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UVWK] must return child streams when providing a parent stream id",
        "fullTitle": "streams GET / [UVWK] must return child streams when providing a parent stream id",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AJZL] must return a correct error if the parent stream is unknown",
        "fullTitle": "streams GET / [AJZL] must return a correct error if the parent stream is unknown",
        "duration": 20,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ENVV] must create a new \"root\" stream with the sent data, returning it",
        "fullTitle": "streams POST / [ENVV] must create a new \"root\" stream with the sent data, returning it",
        "duration": 40,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A2HP] must return a correct error if the sent data is badly formatted",
        "fullTitle": "streams POST / [A2HP] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GGS3] must return a correct error if a stream with the same id already exists",
        "fullTitle": "streams POST / [GGS3] must return a correct error if a stream with the same id already exists",
        "duration": 24,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UHKI] must allow reuse of deleted ids",
        "fullTitle": "streams POST / [UHKI] must allow reuse of deleted ids",
        "duration": 49,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8WGG] must accept explicit null for optional fields",
        "fullTitle": "streams POST / [8WGG] must accept explicit null for optional fields",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NR4D] must fail if a sibling stream with the same name already exists",
        "fullTitle": "streams POST / [NR4D] must fail if a sibling stream with the same name already exists",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JINC] must return a correct error if the sent data is not valid JSON",
        "fullTitle": "streams POST / [JINC] must return a correct error if the sent data is not valid JSON",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CHDM] must create a new child stream (with predefined id) when providing a parent stream id",
        "fullTitle": "streams POST / [CHDM] must create a new child stream (with predefined id) when providing a parent stream id",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[88VQ] must return an error if the new stream's parentId is the empty string",
        "fullTitle": "streams POST / [88VQ] must return an error if the new stream's parentId is the empty string",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[84RK] must slugify the new stream's predefined id",
        "fullTitle": "streams POST / [84RK] must slugify the new stream's predefined id",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2B3H] must return a correct error if the parent stream is unknown",
        "fullTitle": "streams POST / [2B3H] must return a correct error if the parent stream is unknown",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8JB5] must return a correct error if the given predefined stream's id is \"null\"",
        "fullTitle": "streams POST / [8JB5] must return a correct error if the given predefined stream's id is \"null\"",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6TPQ] must return a correct error if the given predefined stream's id is \"*\"",
        "fullTitle": "streams POST / [6TPQ] must return a correct error if the given predefined stream's id is \"*\"",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SO48] must modify the stream with the sent data",
        "fullTitle": "streams PUT /<id> [SO48] must modify the stream with the sent data",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5KNJ] must accept explicit null for optional fields",
        "fullTitle": "streams PUT /<id> [5KNJ] must accept explicit null for optional fields",
        "duration": 29,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0ANV] must add/update/remove the specified client data fields without touching the others",
        "fullTitle": "streams PUT /<id> [0ANV] must add/update/remove the specified client data fields without touching the others",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PL2G] must return a correct error if the stream does not exist",
        "fullTitle": "streams PUT /<id> [PL2G] must return a correct error if the stream does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JWT4] must return a correct error if the sent data is badly formatted",
        "fullTitle": "streams PUT /<id> [JWT4] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[344I] must fail if a sibling stream with the same name already exists",
        "fullTitle": "streams PUT /<id> [344I] must fail if a sibling stream with the same name already exists",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PT1E] must move the stream under the given parent when specified",
        "fullTitle": "streams PUT /<id> [PT1E] must move the stream under the given parent when specified",
        "duration": 35,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HJBH] must return a correct error if the new parent stream is unknown",
        "fullTitle": "streams PUT /<id> [HJBH] must return a correct error if the new parent stream is unknown",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PN1H] must fail and throw a forbidden error in strict mode",
        "fullTitle": "streams PUT /<id> forbidden updates of protected fields [PN1H] must fail and throw a forbidden error in strict mode",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A3WC] must succeed by ignoring protected fields and log a warning in non-strict mode",
        "fullTitle": "streams PUT /<id> forbidden updates of protected fields [A3WC] must succeed by ignoring protected fields and log a warning in non-strict mode",
        "duration": 1058,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[205A] must flag the specified stream as trashed",
        "fullTitle": "streams DELETE /<id> [205A] must flag the specified stream as trashed",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TEFF] must delete the stream when already trashed with its descendants if there are no linked events",
        "fullTitle": "streams DELETE /<id> [TEFF] must delete the stream when already trashed with its descendants if there are no linked events",
        "duration": 59,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LVTR] must return a correct error if there are linked events and the related parameter is missing",
        "fullTitle": "streams DELETE /<id> [LVTR] must return a correct error if there are linked events and the related parameter is missing",
        "duration": 27,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RKEU] must reject the deletion of a root stream with mergeEventsWithParent=true",
        "fullTitle": "streams DELETE /<id> [RKEU] must reject the deletion of a root stream with mergeEventsWithParent=true",
        "duration": 27,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[26V0] must reassign the linked events to the deleted stream's parent when specified",
        "fullTitle": "streams DELETE /<id> [26V0] must reassign the linked events to the deleted stream's parent when specified",
        "duration": 61,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KLD8] must delete the linked events when mergeEventsWithParent is false",
        "fullTitle": "streams DELETE /<id> [KLD8] must delete the linked events when mergeEventsWithParent is false",
        "duration": 132,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1U1M] must return a correct error if the item is unknown",
        "fullTitle": "streams DELETE /<id> [1U1M] must return a correct error if the item is unknown",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0G7C] must not send a welcome email if mailing is deactivated",
        "fullTitle": "system (ex-register) POST /create-user [0G7C] must not send a welcome email if mailing is deactivated",
        "duration": 1224,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TWBF] must not send a welcome email if welcome mail is deactivated",
        "fullTitle": "system (ex-register) POST /create-user [TWBF] must not send a welcome email if welcome mail is deactivated",
        "duration": 1237,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FUTR] must create a new user with the sent data, sending a welcome email",
        "fullTitle": "system (ex-register) POST /create-user when email sending really works [FUTR] must create a new user with the sent data, sending a welcome email",
        "duration": 1352,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9K71] must run the process but not save anything for test username \"recla\"",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [9K71] must run the process but not save anything for test username \"recla\"",
        "duration": 1242,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZG1L] must support the old \"/register\" path for backwards-compatibility",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [ZG1L] must support the old \"/register\" path for backwards-compatibility",
        "duration": 66,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VGF5] must return a correct 400 error if the sent data is badly formatted",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [VGF5] must return a correct 400 error if the sent data is badly formatted",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ABI5] must return a correct 400 error if the language property is above 5 characters",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [ABI5] must return a correct 400 error if the language property is above 5 characters",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OVI4] must return a correct 400 error if the language property is the empty string",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [OVI4] must return a correct 400 error if the language property is the empty string",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RD10] must return a correct 400 error if a user with the same user name already exists",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [RD10] must return a correct 400 error if a user with the same user name already exists",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NPJE] must return a correct 400 error if a user with the same email address already exists",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [NPJE] must return a correct 400 error if a user with the same email address already exists",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y5JB] must return a correct 404 error when authentication is invalid",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [Y5JB] must return a correct 404 error when authentication is invalid",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GF3L] must return a correct error if the content type is wrong",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [GF3L] must return a correct error if the content type is wrong",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y69B] must replace the passwordHash in the logs by (hidden) when the authentication is invalid",
        "fullTitle": "system (ex-register) POST /create-user when we log into a temporary log file [Y69B] must replace the passwordHash in the logs by (hidden) when the authentication is invalid",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MEJ9] must replace the passwordHash in the logs by (hidden) when the payload is invalid (here parameters)",
        "fullTitle": "system (ex-register) POST /create-user when we log into a temporary log file [MEJ9] must replace the passwordHash in the logs by (hidden) when the payload is invalid (here parameters)",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CO6H] must not mention the passwordHash in the logs when none is provided",
        "fullTitle": "system (ex-register) POST /create-user when we log into a temporary log file [CO6H] must not mention the passwordHash in the logs when none is provided",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9C1A] must return user information (including time of last account use)",
        "fullTitle": "system (ex-register) GET /user-info/{username} [9C1A] must return user information (including time of last account use)",
        "duration": 83,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FNJ5] must return a correct 404 error when authentication is invalid",
        "fullTitle": "system (ex-register) GET /user-info/{username} [FNJ5] must return a correct 404 error when authentication is invalid",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GY5H] should parse file uploads",
        "fullTitle": "uploads middleware hasFileUpload [GY5H] should parse file uploads",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[B76G] notifies internal listeners",
        "fullTitle": "Notifications #serverReady [B76G] notifies internal listeners",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SRAU] notifies axon listeners",
        "fullTitle": "Notifications #serverReady [SRAU] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P6ZD] notifies internal listeners",
        "fullTitle": "Notifications #accountChanged [P6ZD] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q96S] notifies axon listeners",
        "fullTitle": "Notifications #accountChanged [Q96S] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P5CG] notifies internal listeners",
        "fullTitle": "Notifications #accessesChanged [P5CG] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VSN6] notifies axon listeners",
        "fullTitle": "Notifications #accessesChanged [VSN6] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VU4A] notifies internal listeners",
        "fullTitle": "Notifications #followedSlicesChanged [VU4A] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UD2B] notifies axon listeners",
        "fullTitle": "Notifications #followedSlicesChanged [UD2B] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LDUQ] notifies internal listeners",
        "fullTitle": "Notifications #streamsChanged [LDUQ] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BUR1] notifies axon listeners",
        "fullTitle": "Notifications #streamsChanged [BUR1] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[N8RI] notifies internal listeners",
        "fullTitle": "Notifications #eventsChanged [N8RI] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TRMW] notifies axon listeners",
        "fullTitle": "Notifications #eventsChanged [TRMW] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IKAI] returns true if all properties exist",
        "fullTitle": "Authentication hasProperties [IKAI] returns true if all properties exist",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[K2PZ] returns false if not all properties exist",
        "fullTitle": "Authentication hasProperties [K2PZ] returns false if not all properties exist",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U2NA] returns false if null is given",
        "fullTitle": "Authentication hasProperties [U2NA] returns false if null is given",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WJ7J] returns false if a string is given",
        "fullTitle": "Authentication hasProperties [WJ7J] returns false if a string is given",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DTZ1] should behave as documented in the method",
        "fullTitle": "tryCoerceStringValues [DTZ1] should behave as documented in the method",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[X26S] doesn't create keys in object",
        "fullTitle": "tryCoerceStringValues [X26S] doesn't create keys in object",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4MHH] should convert to array",
        "fullTitle": "tryCoerceStringValues [4MHH] should convert to array",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[X8PY] number conversion works",
        "fullTitle": "tryCoerceStringValues [X8PY] number conversion works",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S386] should construct",
        "fullTitle": "NatsPublisher [S386] should construct",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[I21M] delivers messages to \"USERNAME.sok1\"",
        "fullTitle": "NatsPublisher [I21M] delivers messages to \"USERNAME.sok1\"",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DMMP] should construct",
        "fullTitle": "NatsSubscriber [DMMP] should construct",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4MAI] accepts messages from USERNAME.sok1 and dispatches them to sinks",
        "fullTitle": "NatsSubscriber when subscribed to \"foobar\" subscribe(\"USERNAME\") [4MAI] accepts messages from USERNAME.sok1 and dispatches them to sinks",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[47BP] ignores messages from other users",
        "fullTitle": "NatsSubscriber when subscribed to \"foobar\" subscribe(\"USERNAME\") [47BP] ignores messages from other users",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L49E] should unsubscribe from NATS",
        "fullTitle": "NatsSubscriber when subscribed to \"foobar\" unsubscribe() [L49E] should unsubscribe from NATS",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "pending": [
    ],
    "failures": [],
    "passes": [
      {
        "title": "[P12L] should contain deletions",
        "fullTitle": "access deletions when given a few existing accesses accesses.get [P12L] should contain deletions",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BQ7M] contains active accesses",
        "fullTitle": "access deletions when given a few existing accesses accesses.get [BQ7M] contains active accesses",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NVCQ] contains deleted accesses as well",
        "fullTitle": "access deletions when given a few existing accesses accesses.get [NVCQ] contains deleted accesses as well",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6ZQL] deleted access are in UTC (seconds) format",
        "fullTitle": "access deletions when given a few existing accesses accesses.get [6ZQL] deleted access are in UTC (seconds) format",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[N3Q1] should contain an access",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a valid access [N3Q1] should contain an access",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J77Z] should contain the set values, but no \"deleted\" field in the API response",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a valid access [J77Z] should contain the set values, but no \"deleted\" field in the API response",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A4JP] should contain the field \"deleted:null\" in the database",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a valid access [A4JP] should contain the field \"deleted:null\" in the database",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1DJ6] should return an error",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a deleted access [1DJ6] should return an error",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7ZPK] error should say that the deleted field is forbidden upon creation",
        "fullTitle": "access deletions when given a few existing accesses accesses.create for a deleted access [7ZPK] error should say that the deleted field is forbidden upon creation",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JNJK] should return an error",
        "fullTitle": "access deletions when given a few existing accesses accesses.update [JNJK] should return an error",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OS36] error should say that the deleted field is forbidden upon update",
        "fullTitle": "access deletions when given a few existing accesses accesses.update [OS36] error should say that the deleted field is forbidden upon update",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[489J] succeeds",
        "fullTitle": "access expiry when given a few existing accesses accesses.get vanilla version [489J] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7NPE] contains only active accesses",
        "fullTitle": "access expiry when given a few existing accesses accesses.get vanilla version [7NPE] contains only active accesses",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PIGE] succeeds",
        "fullTitle": "access expiry when given a few existing accesses accesses.get when given the includeExpired=true parameter [PIGE] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DZHL] includes expired accesses",
        "fullTitle": "access expiry when given a few existing accesses accesses.get when given the includeExpired=true parameter [DZHL] includes expired accesses",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3ONA] creates an access with set expiry timestamp",
        "fullTitle": "access expiry when given a few existing accesses accesses.create when called with expireAfter>0 [3ONA] creates an access with set expiry timestamp",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8B65] creates an expired access",
        "fullTitle": "access expiry when given a few existing accesses accesses.create when called with expireAfter=0 [8B65] creates an expired access",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JHWH] fails",
        "fullTitle": "access expiry when given a few existing accesses accesses.create when called with expireAfter<0 [JHWH] fails",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FMKA] sets the 'expires' attribute",
        "fullTitle": "access expiry when given a few existing accesses accesses.update with expireAfter>0 [FMKA] sets the 'expires' attribute",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TKKF] expires the access immediately",
        "fullTitle": "access expiry when given a few existing accesses accesses.update with expireAfter=0 [TKKF] expires the access immediately",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D80R] removes expiry",
        "fullTitle": "access expiry when given a few existing accesses accesses.update with expires=null [D80R] removes expiry",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IW8Y] fails",
        "fullTitle": "access expiry when given a few existing accesses accesses.update when trying to update itself with a longer expiration [IW8Y] fails",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[B66B] returns the matching access",
        "fullTitle": "access expiry when given a few existing accesses accesses.checkApp when the matching access is not expired [B66B] returns the matching access",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DLHJ] returns no match",
        "fullTitle": "access expiry when given a few existing accesses accesses.checkApp when the matching access is expired [DLHJ] returns no match",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AJG5] fails",
        "fullTitle": "access expiry when given a few existing accesses other API accesses using an expired access [AJG5] fails",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KGT4] returns a proper error message",
        "fullTitle": "access expiry when given a few existing accesses other API accesses using an expired access [KGT4] returns a proper error message",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CBRF] succeeds",
        "fullTitle": "access expiry when given a few existing accesses other API accesses using a valid access [CBRF] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KML2] succeeds",
        "fullTitle": "access client data when given a few existing accesses accesses.get [KML2] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NY85] contains existing accesses with clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.get [NY85] contains existing accesses with clientData",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OMUO] creates an access with empty clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.create when called with clientData={} [OMUO] creates an access with empty clientData",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[E5C1] throws a schema error",
        "fullTitle": "access client data when given a few existing accesses accesses.create when called with clientData=null [E5C1] throws a schema error",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JYD4] creates an access with complex clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.create when called with complex clientData [JYD4] creates an access with complex clientData",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IY9L] updates previous clientData with new clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.update if existing clientData was not empty [IY9L] updates previous clientData with new clientData",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SUT0] keeps existing clientData untouched",
        "fullTitle": "access client data when given a few existing accesses accesses.update if clientData is not provided [SUT0] keeps existing clientData untouched",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WC3I] sets clientData to provided clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.update if existing clientData was empty [WC3I] sets clientData to provided clientData",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2OUY] removes existing clientData",
        "fullTitle": "access client data when given a few existing accesses accesses.update if provided clientData is explicitely null [2OUY] removes existing clientData",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U1AM] returns the matching access",
        "fullTitle": "access client data when given a few existing accesses accesses.checkApp when the provided clientData matches the existing clientData [U1AM] returns the matching access",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2EER] returns no match",
        "fullTitle": "access client data when given a few existing accesses accesses.checkApp when the provided clientData does not match the existing clientData [2EER] returns no match",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DHZQ] returns no match",
        "fullTitle": "access client data when given a few existing accesses accesses.checkApp when no clientData is provided but existing access has one [DHZQ] returns no match",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[80HI] succeeds",
        "fullTitle": "users pool create pool user [80HI] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y95U] contains a generated pool user id",
        "fullTitle": "users pool create pool user [Y95U] contains a generated pool user id",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JKN6] created a user in the database",
        "fullTitle": "users pool create pool user [JKN6] created a user in the database",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YB72] created the related collections",
        "fullTitle": "users pool create pool user [YB72] created the related collections",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WBCJ] created the related indexes",
        "fullTitle": "users pool create pool user [WBCJ] created the related indexes",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DHID] must succeed",
        "fullTitle": "users pool get pool size when empty [DHID] must succeed",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LH6N] must return 0",
        "fullTitle": "users pool get pool size when empty [LH6N] must return 0",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CTP7] succeeds",
        "fullTitle": "users pool get pool size when adding pool users [CTP7] succeeds",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[APQS] has the right number of pool users",
        "fullTitle": "users pool get pool size when adding pool users [APQS] has the right number of pool users",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YEHW] must return shared accesses whose permissions are a subset of the current one's",
        "fullTitle": "accesses (app) GET / [YEHW] must return shared accesses whose permissions are a subset of the current one's",
        "duration": 82,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GLHP] must be forbidden to requests with a shared access token",
        "fullTitle": "accesses (app) GET / [GLHP] must be forbidden to requests with a shared access token",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QVHS] must create a new shared access with the sent data and return it",
        "fullTitle": "accesses (app) POST / [QVHS] must create a new shared access with the sent data and return it",
        "duration": 42,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6GR1] must forbid trying to create a non-shared access",
        "fullTitle": "accesses (app) POST / [6GR1] must forbid trying to create a non-shared access",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A4MC] must forbid trying to create an access with greater permissions",
        "fullTitle": "accesses (app) POST / [A4MC] must forbid trying to create an access with greater permissions",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QN6D] must return a correct error if the sent data is badly formatted",
        "fullTitle": "accesses (app) POST / [QN6D] must return a correct error if the sent data is badly formatted",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4HAE] must allow creation of shared accesses with an access that has superior permission on root stream (*)",
        "fullTitle": "accesses (app) POST / [4HAE] must allow creation of shared accesses with an access that has superior permission on root stream (*)",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ACUA] must modify the access with the sent data",
        "fullTitle": "accesses (app) PUT /<token> [ACUA] must modify the access with the sent data",
        "duration": 26,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[11UZ] must forbid trying to modify a non-shared access",
        "fullTitle": "accesses (app) PUT /<token> [11UZ] must forbid trying to modify a non-shared access",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3RJC] must forbid trying to modify an access with greater permissions",
        "fullTitle": "accesses (app) PUT /<token> [3RJC] must forbid trying to modify an access with greater permissions",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S7G3] must return a correct error if the access does not exist",
        "fullTitle": "accesses (app) PUT /<token> [S7G3] must return a correct error if the access does not exist",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VZBW] must return a correct error if the sent data is badly formatted",
        "fullTitle": "accesses (app) PUT /<token> [VZBW] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AZID] must return a correct error if an access with the same name already exists",
        "fullTitle": "accesses (app) PUT /<token> [AZID] must return a correct error if an access with the same name already exists",
        "duration": 21,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5BOO] must delete the shared access",
        "fullTitle": "accesses (app) DELETE /<token> [5BOO] must delete the shared access",
        "duration": 35,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VGQS] must forbid trying to delete a non-shared access",
        "fullTitle": "accesses (app) DELETE /<token> [VGQS] must forbid trying to delete a non-shared access",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZTSY] must forbid trying to delete an access with greater permissions",
        "fullTitle": "accesses (app) DELETE /<token> [ZTSY] must forbid trying to delete an access with greater permissions",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J32P] must return a correct error if the access does not exist",
        "fullTitle": "accesses (app) DELETE /<token> [J32P] must return a correct error if the access does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[K5BF] must return all accesses (including personal ones)",
        "fullTitle": "accesses (personal) GET / [K5BF] must return all accesses (including personal ones)",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BU9U] must create a new shared access with the sent data, returning it",
        "fullTitle": "accesses (personal) POST / [BU9U] must create a new shared access with the sent data, returning it",
        "duration": 37,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FPUE] must create a new app access with the sent data, creating/restoring requested streams",
        "fullTitle": "accesses (personal) POST / [FPUE] must create a new app access with the sent data, creating/restoring requested streams",
        "duration": 82,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[865I] must accept two app accesses with the same name (app ids) but different device names",
        "fullTitle": "accesses (personal) POST / [865I] must accept two app accesses with the same name (app ids) but different device names",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4Y3Y] must ignore erroneous requests to create new streams",
        "fullTitle": "accesses (personal) POST / [4Y3Y] must ignore erroneous requests to create new streams",
        "duration": 34,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WSG8] must fail if a stream similar to that requested for creation already exists",
        "fullTitle": "accesses (personal) POST / [WSG8] must fail if a stream similar to that requested for creation already exists",
        "duration": 21,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GVC7] must refuse to create new personal accesses (obtained via login only)",
        "fullTitle": "accesses (personal) POST / [GVC7] must refuse to create new personal accesses (obtained via login only)",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YRNE] must slugify the new access' predefined token",
        "fullTitle": "accesses (personal) POST / [YRNE] must slugify the new access' predefined token",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V3AV] must return an error if the sent data is badly formatted",
        "fullTitle": "accesses (personal) POST / [V3AV] must return an error if the sent data is badly formatted",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HETK] must refuse empty `defaultName` values for streams",
        "fullTitle": "accesses (personal) POST / [HETK] must refuse empty `defaultName` values for streams",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YG81] must return an error if an access with the same token already exists",
        "fullTitle": "accesses (personal) POST / [YG81] must return an error if an access with the same token already exists",
        "duration": 25,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GZTH] must return an error if an access with the same name already exists",
        "fullTitle": "accesses (personal) POST / [GZTH] must return an error if an access with the same name already exists",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4HO6] must return an error if an \"app\" access with the same name (app id) and device name already exists",
        "fullTitle": "accesses (personal) POST / [4HO6] must return an error if an \"app\" access with the same name (app id) and device name already exists",
        "duration": 21,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PO0R] must return an error if the device name is set for a non-app access",
        "fullTitle": "accesses (personal) POST / [PO0R] must return an error if the device name is set for a non-app access",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RWGG] must return an error if the given predefined access's token is a reserved word",
        "fullTitle": "accesses (personal) POST / [RWGG] must return an error if the given predefined access's token is a reserved word",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[66GW] must modify the shared access with the sent data",
        "fullTitle": "accesses (personal) PUT /<token> [66GW] must modify the shared access with the sent data",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[F67O] must modify the personal access with the specified data",
        "fullTitle": "accesses (personal) PUT /<token> [F67O] must modify the personal access with the specified data",
        "duration": 37,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U04A] must return an error if the access does not exist",
        "fullTitle": "accesses (personal) PUT /<token> [U04A] must return an error if the access does not exist",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P2UC] must return an error if the sent data is badly formatted",
        "fullTitle": "accesses (personal) PUT /<token> [P2UC] must return an error if the sent data is badly formatted",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KK1F] must return an error if an access with the same name and type already exists",
        "fullTitle": "accesses (personal) PUT /<token> [KK1F] must return an error if an access with the same name and type already exists",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4Y59] must prevent update of protected fields and throw a forbidden error in strict mode",
        "fullTitle": "accesses (personal) PUT /<token> forbidden updates of protected fields [4Y59] must prevent update of protected fields and throw a forbidden error in strict mode",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6KC8] must prevent update of protected fields and log a warning in non-strict mode",
        "fullTitle": "accesses (personal) PUT /<token> forbidden updates of protected fields [6KC8] must prevent update of protected fields and log a warning in non-strict mode",
        "duration": 1157,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[B8MA] must forbid to elevate a read level into a manage level using a contribute access ",
        "fullTitle": "accesses (personal) PUT /<token> forbidden updates of protected fields [B8MA] must forbid to elevate a read level into a manage level using a contribute access ",
        "duration": 67,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AMEV] must forbid to extend the permission streamIds beyond the authorized context ",
        "fullTitle": "accesses (personal) PUT /<token> forbidden updates of protected fields [AMEV] must forbid to extend the permission streamIds beyond the authorized context ",
        "duration": 63,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S8EK] must delete the shared access",
        "fullTitle": "accesses (personal) DELETE /<token> [S8EK] must delete the shared access",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5GBI] must delete the personal access",
        "fullTitle": "accesses (personal) DELETE /<token> [5GBI] must delete the personal access",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NN11] must return an error if the access does not exist",
        "fullTitle": "accesses (personal) DELETE /<token> [NN11] must return an error if the access does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VCH9] must return the adjusted permissions structure if no access exists",
        "fullTitle": "accesses (personal) POST /check-app [VCH9] must return the adjusted permissions structure if no access exists",
        "duration": 15,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R8H4] must accept requested permissions with \"*\" for \"all streams\"",
        "fullTitle": "accesses (personal) POST /check-app [R8H4] must accept requested permissions with \"*\" for \"all streams\"",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9QNK] must return the existing app access if matching",
        "fullTitle": "accesses (personal) POST /check-app [9QNK] must return the existing app access if matching",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IF33] must also return the token of the existing mismatching access if any",
        "fullTitle": "accesses (personal) POST /check-app [IF33] must also return the token of the existing mismatching access if any",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G5T2] must propose fixes to duplicate ids of streams and signal an error when appropriate",
        "fullTitle": "accesses (personal) POST /check-app [G5T2] must propose fixes to duplicate ids of streams and signal an error when appropriate",
        "duration": 13,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MTY1] must return an error if the sent data is badly formatted",
        "fullTitle": "accesses (personal) POST /check-app [MTY1] must return an error if the sent data is badly formatted",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U5KD] must be forbidden to non-personal accesses",
        "fullTitle": "accesses (personal) POST /check-app [U5KD] must be forbidden to non-personal accesses",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PHSB] must return the user's account details",
        "fullTitle": "account GET / [PHSB] must return the user's account details",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[K5EI] must be forbidden to non-personal accesses",
        "fullTitle": "account GET / [K5EI] must be forbidden to non-personal accesses",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0PPV] must modify account details with the sent data, notifying register if e-mail changed",
        "fullTitle": "account PUT / [0PPV] must modify account details with the sent data, notifying register if e-mail changed",
        "duration": 1265,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AT0V] must return a correct error if the sent data is badly formatted",
        "fullTitle": "account PUT / [AT0V] must return a correct error if the sent data is badly formatted",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NZE2] must be forbidden to non-personal accesses",
        "fullTitle": "account PUT / [NZE2] must be forbidden to non-personal accesses",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NFJQ] must properly compute used storage size for a given user when called",
        "fullTitle": "account storage space monitoring [NFJQ] must properly compute used storage size for a given user when called",
        "duration": 138,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y445] must properly compute storage size for all users in nightly script",
        "fullTitle": "account storage space monitoring [Y445] must properly compute storage size for all users in nightly script",
        "duration": 1124,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0QVH] must be approximately updated (diff) when adding an attached file",
        "fullTitle": "account storage space monitoring [0QVH] must be approximately updated (diff) when adding an attached file",
        "duration": 60,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[93AP] must be approximately updated (diff) when deleting an attached file",
        "fullTitle": "account storage space monitoring [93AP] must be approximately updated (diff) when deleting an attached file",
        "duration": 55,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5WO0] must be approximately updated (diff) when deleting an event",
        "fullTitle": "account storage space monitoring [5WO0] must be approximately updated (diff) when deleting an event",
        "duration": 86,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6041] must change the password to the given value",
        "fullTitle": "account /change-password [6041] must change the password to the given value",
        "duration": 282,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[STWH] must return an error if the given old password does not match",
        "fullTitle": "account /change-password [STWH] must return an error if the given old password does not match",
        "duration": 88,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8I1N] must return a correct error if the sent data is badly formatted",
        "fullTitle": "account /change-password [8I1N] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J5VH] must be forbidden to non-personal accesses",
        "fullTitle": "account /change-password [J5VH] must be forbidden to non-personal accesses",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G1VN] \"request\" must trigger an email with a reset token, store that token, then \"reset\" must reset the password to the given value",
        "fullTitle": "account /request-password-reset and /reset-password [G1VN] \"request\" must trigger an email with a reset token, store that token, then \"reset\" must reset the password to the given value",
        "duration": 1446,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HV0V] must not trigger a reset email if mailing is deactivated",
        "fullTitle": "account /request-password-reset and /reset-password [HV0V] must not trigger a reset email if mailing is deactivated",
        "duration": 1228,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VZ1W] must not trigger a reset email if reset mail is deactivated",
        "fullTitle": "account /request-password-reset and /reset-password [VZ1W] must not trigger a reset email if reset mail is deactivated",
        "duration": 1208,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3P2N] must not be possible to use a reset token to illegally change password of another user",
        "fullTitle": "account /request-password-reset and /reset-password [3P2N] must not be possible to use a reset token to illegally change password of another user",
        "duration": 27,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J6GB] \"request\" must return an error if the requesting app is not trusted",
        "fullTitle": "account /request-password-reset and /reset-password [J6GB] \"request\" must return an error if the requesting app is not trusted",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5K14] \"request\" must return an error if sent data is badly formatted",
        "fullTitle": "account /request-password-reset and /reset-password [5K14] \"request\" must return an error if sent data is badly formatted",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PKBP] \"reset\" must return an error if the reset token is invalid/expired",
        "fullTitle": "account /request-password-reset and /reset-password [PKBP] \"reset\" must return an error if the reset token is invalid/expired",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ON9V] \"reset\" must return an error if the requesting app is not trusted",
        "fullTitle": "account /request-password-reset and /reset-password [ON9V] \"reset\" must return an error if the requesting app is not trusted",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[T5L9] \"reset\" must return an error if sent data is badly formatted",
        "fullTitle": "account /request-password-reset and /reset-password [T5L9] \"reset\" must return an error if sent data is badly formatted",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RWIA] must not return history when calling events.get",
        "fullTitle": "Auditing Events [RWIA] must not return history when calling events.get",
        "duration": 48,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FLLW] must delete the event's history when deleting it with deletionMode=keep-nothing",
        "fullTitle": "Auditing Events deletionMode [FLLW] must delete the event's history when deleting it with deletionMode=keep-nothing",
        "duration": 1154,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6W0B] must minimize the event's history when deleting it with deletionMode=keep-authors",
        "fullTitle": "Auditing Events deletionMode [6W0B] must minimize the event's history when deleting it with deletionMode=keep-authors",
        "duration": 1139,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1DBC] must not modify the event's history when deleting it with deletionMode=keep-everything",
        "fullTitle": "Auditing Events deletionMode [1DBC] must not modify the event's history when deleting it with deletionMode=keep-everything",
        "duration": 1137,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YRI7] must not return an event's history when calling getOne with includeHistory flag off",
        "fullTitle": "Auditing Events getOne [YRI7] must not return an event's history when calling getOne with includeHistory flag off",
        "duration": 14,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KPQZ] must return an event's history when calling getOne with includeHistory flag on",
        "fullTitle": "Auditing Events getOne [KPQZ] must return an event's history when calling getOne with includeHistory flag on",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PKA9] must not generate history when updating an event",
        "fullTitle": "Auditing Events forceKeepHistory is OFF [PKA9] must not generate history when updating an event",
        "duration": 111,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TLG6] must not generate history of the running event that was stopped because of the start call on another event",
        "fullTitle": "Auditing Events forceKeepHistory is OFF [TLG6] must not generate history of the running event that was stopped because of the start call on another event",
        "duration": 53,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DZMK] must not generate history when no event was stopped in the procedure of the start call on another event",
        "fullTitle": "Auditing Events forceKeepHistory is OFF [DZMK] must not generate history when no event was stopped in the procedure of the start call on another event",
        "duration": 39,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MB48] must not generate history when calling stop on a running event",
        "fullTitle": "Auditing Events forceKeepHistory is OFF [MB48] must not generate history when calling stop on a running event",
        "duration": 48,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0P6S] must generate history when updating an event",
        "fullTitle": "Auditing Events forceKeepHistory is ON [0P6S] must generate history when updating an event",
        "duration": 178,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y4CH] must generate history of the running event that was stopped because of the start call on another event",
        "fullTitle": "Auditing Events forceKeepHistory is ON [Y4CH] must generate history of the running event that was stopped because of the start call on another event",
        "duration": 82,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[M90Z] must not generate history when no event was stopped in the procedure of the start call on another event",
        "fullTitle": "Auditing Events forceKeepHistory is ON [M90Z] must not generate history when no event was stopped in the procedure of the start call on another event",
        "duration": 41,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[519W] must generate history when calling stop on a running event",
        "fullTitle": "Auditing Events forceKeepHistory is ON [519W] must generate history when calling stop on a running event",
        "duration": 55,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H1PK] must generate events' history when their stream is deleted with  mergeEventsWithParents=true since their streamId is modified",
        "fullTitle": "Auditing Streams [H1PK] must generate events' history when their stream is deleted with  mergeEventsWithParents=true since their streamId is modified",
        "duration": 139,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[95TJ] must delete the events' history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-nothing'",
        "fullTitle": "Auditing Streams [95TJ] must delete the events' history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-nothing'",
        "duration": 1167,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4U91] must keep the events' minimal history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-authors'",
        "fullTitle": "Auditing Streams [4U91] must keep the events' minimal history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-authors'",
        "duration": 1166,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D4CY] must not delete the events' history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-everything'",
        "fullTitle": "Auditing Streams [D4CY] must not delete the events' history when their stream is deleted with  mergeEventsWithParents=false and deletionMode='keep-everything'",
        "duration": 1160,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2CV5] must authenticate the given credentials, open a session and return the access token",
        "fullTitle": "auth /login [2CV5] must authenticate the given credentials, open a session and return the access token",
        "duration": 148,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5UMP] must reuse the current session if already open",
        "fullTitle": "auth /login [5UMP] must reuse the current session if already open",
        "duration": 194,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[509A] must accept \"wildcarded\" app ids and origins",
        "fullTitle": "auth /login [509A] must accept \"wildcarded\" app ids and origins",
        "duration": 94,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ADL4] must accept \"no origin\" (i.e. not a CORS request) if authorized",
        "fullTitle": "auth /login [ADL4] must accept \"no origin\" (i.e. not a CORS request) if authorized",
        "duration": 114,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A7JL] must also accept \"referer\" in place of \"origin\" (e.g. some browsers do not provide \"origin\")",
        "fullTitle": "auth /login [A7JL] must also accept \"referer\" in place of \"origin\" (e.g. some browsers do not provide \"origin\")",
        "duration": 99,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IKNM] must also accept \"referer\" in place of \"origin\" (e.g. some browsers do not provide \"origin\")",
        "fullTitle": "auth /login [IKNM] must also accept \"referer\" in place of \"origin\" (e.g. some browsers do not provide \"origin\")",
        "duration": 98,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1TI6] must not be case-sensitive for the username",
        "fullTitle": "auth /login [1TI6] must not be case-sensitive for the username",
        "duration": 100,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L7JQ] must return a correct error when the local credentials are missing or invalid",
        "fullTitle": "auth /login [L7JQ] must return a correct error when the local credentials are missing or invalid",
        "duration": 88,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4AQR] must return a correct error if the app id is missing or untrusted",
        "fullTitle": "auth /login [4AQR] must return a correct error if the app id is missing or untrusted",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NDB0] must return a correct error if the origin is missing or does not match the app id",
        "fullTitle": "auth /login [NDB0] must return a correct error if the origin is missing or does not match the app id",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6PQR] must support concurrent login request",
        "fullTitle": "auth /login [6PQR] must support concurrent login request",
        "duration": 124,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9WHP] must not leak _private object from Result",
        "fullTitle": "auth /login [9WHP] must not leak _private object from Result",
        "duration": 94,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[C03J] must replace the password in the logs by (hidden) when an error occurs",
        "fullTitle": "auth /login when we log into a temporary log file [C03J] must replace the password in the logs by (hidden) when an error occurs",
        "duration": 156,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G0YT] must not mention the password in the logs when none is provided",
        "fullTitle": "auth /login when we log into a temporary log file [G0YT] must not mention the password in the logs when none is provided",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6W5M] must terminate the access session and fail to logout a second time (session already expired)",
        "fullTitle": "auth /logout [6W5M] must terminate the access session and fail to logout a second time (session already expired)",
        "duration": 213,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[E2MD] (or any request) must alternatively accept the access token in the query string",
        "fullTitle": "auth /logout [E2MD] (or any request) must alternatively accept the access token in the query string",
        "duration": 144,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TIDW] GET /who-am-i must return a 404 as it has been deprecated",
        "fullTitle": "auth SSO support [TIDW] GET /who-am-i must return a 404 as it has been deprecated",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6KLF] must set the SSO cookie on /login with the access token",
        "fullTitle": "auth SSO support when deprecated.auth.ssoIsWhoamiActivated is set [6KLF] must set the SSO cookie on /login with the access token",
        "duration": 166,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QT6T] must answer /who-am-i with username and session details if session open",
        "fullTitle": "auth SSO support when deprecated.auth.ssoIsWhoamiActivated is set [QT6T] must answer /who-am-i with username and session details if session open",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UNPB] must clear the SSO cookie on /logout",
        "fullTitle": "auth SSO support when deprecated.auth.ssoIsWhoamiActivated is set [UNPB] must clear the SSO cookie on /logout",
        "duration": 46,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5G0E] must respond /who-am-i with an \"unauthorized\" error if no cookie is sent",
        "fullTitle": "auth SSO support when deprecated.auth.ssoIsWhoamiActivated is set [5G0E] must respond /who-am-i with an \"unauthorized\" error if no cookie is sent",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WC8C] must return the last 20 non-trashed events (sorted descending) by default",
        "fullTitle": "events GET / [WC8C] must return the last 20 non-trashed events (sorted descending) by default",
        "duration": 106,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U8U9] must only return events for the given streams (incl. sub-streams) when set",
        "fullTitle": "events GET / [U8U9] must only return events for the given streams (incl. sub-streams) when set",
        "duration": 15,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S0M6] must return an error if some of the given streams do not exist",
        "fullTitle": "events GET / [S0M6] must return an error if some of the given streams do not exist",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R667] must only return events with the given tag when set",
        "fullTitle": "events GET / [R667] must only return events with the given tag when set",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KNJY] must only return events with any of the given tags when set",
        "fullTitle": "events GET / [KNJY] must only return events with any of the given tags when set",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QR4I] must only return events of any of the given types when set",
        "fullTitle": "events GET / [QR4I] must only return events of any of the given types when set",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TWP8] must (unofficially) support a wildcard for event types",
        "fullTitle": "events GET / [TWP8] must (unofficially) support a wildcard for event types",
        "duration": 17,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7MOU] must only return events in the given time period sorted ascending when set",
        "fullTitle": "events GET / [7MOU] must only return events in the given time period sorted ascending when set",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[W5IT] must take into account fromTime and toTime even if set to 0",
        "fullTitle": "events GET / [W5IT] must take into account fromTime and toTime even if set to 0",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y6SY] must take into account modifiedSince even if set to 0",
        "fullTitle": "events GET / [Y6SY] must take into account modifiedSince even if set to 0",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QNDP] must properly exclude period events completed before the given period",
        "fullTitle": "events GET / [QNDP] must properly exclude period events completed before the given period",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5UFW] must return ongoing events started before the given time period",
        "fullTitle": "events GET / [5UFW] must return ongoing events started before the given time period",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S9J4] must only return events in the given paging range when set",
        "fullTitle": "events GET / [S9J4] must only return events in the given paging range when set",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[915E] must return only trashed events when requested",
        "fullTitle": "events GET / [915E] must return only trashed events when requested",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6H0Z] must return all events (trashed or not) when requested",
        "fullTitle": "events GET / [6H0Z] must return all events (trashed or not) when requested",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JZYF] must return only events modified since the given time when requested",
        "fullTitle": "events GET / [JZYF] must return only events modified since the given time when requested",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[B766] must include event deletions (since that time) when requested",
        "fullTitle": "events GET / [B766] must include event deletions (since that time) when requested",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V72A] must only return running period event(s) when requested",
        "fullTitle": "events GET / [V72A] must only return running period event(s) when requested",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[68IL] must return an error if no access token is provided",
        "fullTitle": "events GET / [68IL] must return an error if no access token is provided",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[F29M] must return the attached file with the correct headers",
        "fullTitle": "events GET /<event id>/<file id> [F29M] must return the attached file with the correct headers",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NL65] must accept a secure read token in the query string instead of the `\"Authorization\" header",
        "fullTitle": "events GET /<event id>/<file id> [NL65] must accept a secure read token in the query string instead of the `\"Authorization\" header",
        "duration": 17,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TN27] must allow a filename path suffix after the file id",
        "fullTitle": "events GET /<event id>/<file id> [TN27] must allow a filename path suffix after the file id",
        "duration": 16,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LOUB] must allow any filename (including special characters)",
        "fullTitle": "events GET /<event id>/<file id> [LOUB] must allow any filename (including special characters)",
        "duration": 16,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9NJ0] must refuse an invalid file read token",
        "fullTitle": "events GET /<event id>/<file id> [9NJ0] must refuse an invalid file read token",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9HNM] must refuse auth via the regular \"auth\" query string parameter",
        "fullTitle": "events GET /<event id>/<file id> [9HNM] must refuse auth via the regular \"auth\" query string parameter",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MMCZ] must return a proper error if trying to get an unknown attachment",
        "fullTitle": "events GET /<event id>/<file id> [MMCZ] must return a proper error if trying to get an unknown attachment",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1GR6] must create an event with the sent data, returning it",
        "fullTitle": "events POST / [1GR6] must create an event with the sent data, returning it",
        "duration": 47,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QSBV] must set the event's time to \"now\" if missing",
        "fullTitle": "events POST / [QSBV] must set the event's time to \"now\" if missing",
        "duration": 38,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6BVW] must accept explicit null for optional fields",
        "fullTitle": "events POST / [6BVW] must accept explicit null for optional fields",
        "duration": 37,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D2TH] must refuse events with no stream id",
        "fullTitle": "events POST / [D2TH] must refuse events with no stream id",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WN86] must return a correct error if an event with the same id already exists",
        "fullTitle": "events POST / [WN86] must return a correct error if an event with the same id already exists",
        "duration": 20,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[94PW] must not allow reuse of deleted ids (unlike streams)",
        "fullTitle": "events POST / [94PW] must not allow reuse of deleted ids (unlike streams)",
        "duration": 20,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DRFA] must only allow ids that are formatted like cuids",
        "fullTitle": "events POST / [DRFA] must only allow ids that are formatted like cuids",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O7Y2] must reject tags that are too long",
        "fullTitle": "events POST / [O7Y2] must reject tags that are too long",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2885] must fix the tags to an empty array if not set",
        "fullTitle": "events POST / [2885] must fix the tags to an empty array if not set",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0IHM] must try casting string event content to number if appropriate",
        "fullTitle": "events POST / [0IHM] must try casting string event content to number if appropriate",
        "duration": 35,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H7CN] must not stop the running period event if the new event is a mark event (single activity)",
        "fullTitle": "events POST / [H7CN] must not stop the running period event if the new event is a mark event (single activity)",
        "duration": 42,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UL6Y] must not stop the running period event if the stream allows overlapping",
        "fullTitle": "events POST / [UL6Y] must not stop the running period event if the stream allows overlapping",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FZ4T] must validate the event's content if its type is known",
        "fullTitle": "events POST / [FZ4T] must validate the event's content if its type is known",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EL88] must not fail when validating the content if passing a string instead of an object",
        "fullTitle": "events POST / [EL88] must not fail when validating the content if passing a string instead of an object",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JUM6] must return an error if the sent data is badly formatted",
        "fullTitle": "events POST / [JUM6] must return an error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5NEL] must return an error if the associated stream is unknown",
        "fullTitle": "events POST / [5NEL] must return an error if the associated stream is unknown",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1GGK] must return an error if the event's period overlaps existing periods (single activity)",
        "fullTitle": "events POST / [1GGK] must return an error if the event's period overlaps existing periods (single activity)",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3S2T] must allow the event's period overlapping existing periods when the stream allows it",
        "fullTitle": "events POST / [3S2T] must allow the event's period overlapping existing periods when the stream allows it",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q0L6] must return an error if the assigned stream is trashed",
        "fullTitle": "events POST / [Q0L6] must return an error if the assigned stream is trashed",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WUSC] must not fail (500) when sending an array instead of an object",
        "fullTitle": "events POST / [WUSC] must not fail (500) when sending an array instead of an object",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5C8J] must create a running period event stopping any previously running event (single activity)",
        "fullTitle": "events POST /start [5C8J] must create a running period event stopping any previously running event (single activity)",
        "duration": 57,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JHUM] must return an error if a period event already exists later (single activity)",
        "fullTitle": "events POST /start [JHUM] must return an error if a period event already exists later (single activity)",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7FJZ] must allow starting an event before an existing period when the stream allows overlapping",
        "fullTitle": "events POST /start [7FJZ] must allow starting an event before an existing period when the stream allows overlapping",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4CUV] must create a new event with the uploaded files",
        "fullTitle": "events POST / (multipart content) [4CUV] must create a new event with the uploaded files",
        "duration": 104,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HROI] must properly handle part names containing special chars (e.g. \".\", \"$\")",
        "fullTitle": "events POST / (multipart content) [HROI] must properly handle part names containing special chars (e.g. \".\", \"$\")",
        "duration": 75,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0QGV] must return an error if the non-file content part is not JSON",
        "fullTitle": "events POST / (multipart content) [0QGV] must return an error if the non-file content part is not JSON",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R8ER] must return an error if there is more than one non-file content part",
        "fullTitle": "events POST / (multipart content) [R8ER] must return an error if there is more than one non-file content part",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZI01] must add the uploaded files to the event as attachments",
        "fullTitle": "events POST /<event id> (multipart content) [ZI01] must add the uploaded files to the event as attachments",
        "duration": 65,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EUZM] must add the uploaded files to the event without replacing existing attachments",
        "fullTitle": "events POST /<event id> (multipart content) [EUZM] must add the uploaded files to the event without replacing existing attachments",
        "duration": 64,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8GSS] allows access at level=read",
        "fullTitle": "events GET /<id> [8GSS] allows access at level=read",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IBO4] denies access without authorization",
        "fullTitle": "events GET /<id> [IBO4] denies access without authorization",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4QRU] must modify the event with the sent data",
        "fullTitle": "events PUT /<id> [4QRU] must modify the event with the sent data",
        "duration": 39,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6B05] must add/update/remove the specified client data fields without touching the others",
        "fullTitle": "events PUT /<id> [6B05] must add/update/remove the specified client data fields without touching the others",
        "duration": 38,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[C9GL] must return the id of the stopped previously running event if any (single activity)",
        "fullTitle": "events PUT /<id> [C9GL] must return the id of the stopped previously running event if any (single activity)",
        "duration": 46,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FM3G] must accept explicit null for optional fields",
        "fullTitle": "events PUT /<id> [FM3G] must accept explicit null for optional fields",
        "duration": 46,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BS75] must validate the event's content if its type is known",
        "fullTitle": "events PUT /<id> [BS75] must validate the event's content if its type is known",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FU83] must return an error if the event does not exist",
        "fullTitle": "events PUT /<id> [FU83] must return an error if the event does not exist",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[W2QL] must return an error if the sent data is badly formatted",
        "fullTitle": "events PUT /<id> [W2QL] must return an error if the sent data is badly formatted",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[01B2] must return an error if the associated stream is unknown",
        "fullTitle": "events PUT /<id> [01B2] must return an error if the associated stream is unknown",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SPN1] must return an error if moving a running period event before another existing period event (single activity)",
        "fullTitle": "events PUT /<id> [SPN1] must return an error if moving a running period event before another existing period event (single activity)",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FPEE] must return an error if the event's new period overlaps other events's (single activity)",
        "fullTitle": "events PUT /<id> [FPEE] must return an error if the event's new period overlaps other events's (single activity)",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CUM3] must reject tags that are too long",
        "fullTitle": "events PUT /<id> [CUM3] must reject tags that are too long",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L15U] must prevent update of protected fields and throw a forbidden error in strict mode",
        "fullTitle": "events PUT /<id> forbidden updates of protected fields [L15U] must prevent update of protected fields and throw a forbidden error in strict mode",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6NZ7] must prevent update of protected fields and log a warning in non-strict mode",
        "fullTitle": "events PUT /<id> forbidden updates of protected fields [6NZ7] must prevent update of protected fields and log a warning in non-strict mode",
        "duration": 1132,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VE5N] must stop the previously running period event, returning its id (single activity)",
        "fullTitle": "events POST /stop [VE5N] must stop the previously running period event, returning its id (single activity)",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HYQ3] must stop the last running event of the given type when specified",
        "fullTitle": "events POST /stop [HYQ3] must stop the last running event of the given type when specified",
        "duration": 60,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7NH0] must accept an `id` param to specify the event to stop",
        "fullTitle": "events POST /stop [7NH0] must accept an `id` param to specify the event to stop",
        "duration": 62,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GPSM] must return an error if the specified event does not exist",
        "fullTitle": "events POST /stop [GPSM] must return an error if the specified event does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0Y4J] must return an error if the specified event is not running",
        "fullTitle": "events POST /stop [0Y4J] must return an error if the specified event is not running",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KN22] must return an error if no event is specified and the stream allows overlapping",
        "fullTitle": "events POST /stop [KN22] must return an error if no event is specified and the stream allows overlapping",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BMC6] must return an error if neither stream nor event is specified",
        "fullTitle": "events POST /stop [BMC6] must return an error if neither stream nor event is specified",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RW8M] must delete the attachment (reference in event + file)",
        "fullTitle": "events DELETE /<event id>/<file id> [RW8M] must delete the attachment (reference in event + file)",
        "duration": 53,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZLZN] must return an error if not existing",
        "fullTitle": "events DELETE /<event id>/<file id> [ZLZN] must return an error if not existing",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AT5Y] must flag the event as trashed",
        "fullTitle": "events DELETE /<id> [AT5Y] must flag the event as trashed",
        "duration": 38,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[73CD] must delete the event when already trashed including all its attachments",
        "fullTitle": "events DELETE /<id> [73CD] must delete the event when already trashed including all its attachments",
        "duration": 70,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TNKS] must return all followed slices (ordered by user name, then access token)",
        "fullTitle": "followed slices GET / [TNKS] must return all followed slices (ordered by user name, then access token)",
        "duration": 47,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U9M4] must be forbidden to non-personal accesses",
        "fullTitle": "followed slices GET / [U9M4] must be forbidden to non-personal accesses",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HVYA] must create a new followed slice with the sent data, returning it",
        "fullTitle": "followed slices POST / [HVYA] must create a new followed slice with the sent data, returning it",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BULL] must return a correct error if the sent data is badly formatted",
        "fullTitle": "followed slices POST / [BULL] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GPZK] must return a correct error if the same followed slice (url and token) already exists",
        "fullTitle": "followed slices POST / [GPZK] must return a correct error if the same followed slice (url and token) already exists",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RYNB] must return a correct error if a followed slice with the same name already exists",
        "fullTitle": "followed slices POST / [RYNB] must return a correct error if a followed slice with the same name already exists",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LM08] must modify the followed slice with the sent data",
        "fullTitle": "followed slices PUT /<id> [LM08] must modify the followed slice with the sent data",
        "duration": 34,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QFGH] must return a correct error if the followed slice does not exist",
        "fullTitle": "followed slices PUT /<id> [QFGH] must return a correct error if the followed slice does not exist",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RUQE] must return a correct error if the sent data is badly formatted",
        "fullTitle": "followed slices PUT /<id> [RUQE] must return a correct error if the sent data is badly formatted",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[T256] must return a correct error if a followed slice with the same name already exists",
        "fullTitle": "followed slices PUT /<id> [T256] must return a correct error if a followed slice with the same name already exists",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U7LY] must delete the followed slice",
        "fullTitle": "followed slices DELETE /<id> [U7LY] must delete the followed slice",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UATV] must return a correct error if the followed slice does not exist",
        "fullTitle": "followed slices DELETE /<id> [UATV] must return a correct error if the followed slice does not exist",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DMGV] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with streams schema [DMGV] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Z51K] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with streams schema [Z51K] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EUKL] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with streams schema [EUKL] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0RQM] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with events schema [0RQM] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6TK9] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with events schema [6TK9] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IJ4M] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with events schema [IJ4M] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GP6C] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with accesses schema [GP6C] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is null",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MUC0] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with accesses schema [MUC0] must throw a forbidden error if \"ignoreProtectedFieldUpdates\" is false",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QGDA] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "fullTitle": "methods/helpers/commonFunctions.js: catchForbiddenUpdate(schema) with accesses schema [QGDA] must not throw any error if \"ignoreProtectedFieldUpdates\" is true but print a warn log",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HGVD] should throw an error if mailing method is invalid",
        "fullTitle": "Mailing helper methods [HGVD] should throw an error if mailing method is invalid",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OKQ2] should throw an error if mailing method is missing",
        "fullTitle": "Mailing helper methods [OKQ2] should throw an error if mailing method is missing",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GU60] should not be empty",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [GU60] should not be empty",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8JJU] should contain a valid auth key",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [8JJU] should contain a valid auth key",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G906] should contain a valid recipient",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [G906] should contain a valid recipient",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KBE0] should contain a valid substitution of variables",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [KBE0] should contain a valid substitution of variables",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2ABY] should contain valid tags",
        "fullTitle": "Mailing helper methods using Mandrill validating request body [2ABY] should contain valid tags",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LHCB] should not be empty",
        "fullTitle": "Mailing helper methods using Microservice validating request body [LHCB] should not be empty",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9UEU] should contain a valid auth key",
        "fullTitle": "Mailing helper methods using Microservice validating request body [9UEU] should contain a valid auth key",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1Y6K] should contain a valid recipient",
        "fullTitle": "Mailing helper methods using Microservice validating request body [1Y6K] should contain a valid recipient",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UT8M] should contain a valid substitution of variables",
        "fullTitle": "Mailing helper methods using Microservice validating request body [UT8M] should contain a valid substitution of variables",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TWNI] must return an array preceded by a comma when called with parameter isFirst=false",
        "fullTitle": "ArrayStream [TWNI] must return an array preceded by a comma when called with parameter isFirst=false",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U21Z] must return a valid array when receiving limit-3 items",
        "fullTitle": "ArrayStream testing around the array size limit [U21Z] must return a valid array when receiving limit-3 items",
        "duration": 29,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MKNL] must return a valid array when receiving limit-2 items",
        "fullTitle": "ArrayStream testing around the array size limit [MKNL] must return a valid array when receiving limit-2 items",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MUPF] must return a valid array when receiving limit-1 items",
        "fullTitle": "ArrayStream testing around the array size limit [MUPF] must return a valid array when receiving limit-1 items",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CM4Q] must return a valid array when receiving limit+0 items",
        "fullTitle": "ArrayStream testing around the array size limit [CM4Q] must return a valid array when receiving limit+0 items",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[F8S9] must return a valid array when receiving limit+1 items",
        "fullTitle": "ArrayStream testing around the array size limit [F8S9] must return a valid array when receiving limit+1 items",
        "duration": 14,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6T4V] must return a valid array when receiving limit+2 items",
        "fullTitle": "ArrayStream testing around the array size limit [6T4V] must return a valid array when receiving limit+2 items",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QBOS] must return a valid array when receiving limit+3 items",
        "fullTitle": "ArrayStream testing around the array size limit [QBOS] must return a valid array when receiving limit+3 items",
        "duration": 14,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[69F6] must return a valid array when receiving 0 item(s)",
        "fullTitle": "ArrayStream testing with small number of items [69F6] must return a valid array when receiving 0 item(s)",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BJRT] must return a valid array when receiving 1 item(s)",
        "fullTitle": "ArrayStream testing with small number of items [BJRT] must return a valid array when receiving 1 item(s)",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YJI0] must return a valid array when receiving 2 item(s)",
        "fullTitle": "ArrayStream testing with small number of items [YJI0] must return a valid array when receiving 2 item(s)",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EKQQ] must return a valid array when receiving 3 item(s)",
        "fullTitle": "ArrayStream testing with small number of items [EKQQ] must return a valid array when receiving 3 item(s)",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AFWR] must be fed objects and return them in the callback",
        "fullTitle": "DrainStream [AFWR] must be fed objects and return them in the callback",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[23UQ] must return an error when the provided limit is exceeded",
        "fullTitle": "DrainStream [23UQ] must return an error when the provided limit is exceeded",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1AK1] `get` must only return events in accessible streams",
        "fullTitle": "Access permissions Events [1AK1] `get` must only return events in accessible streams",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NKI5] `get` must return all events when permissions are defined for \"all streams\" (*)",
        "fullTitle": "Access permissions Events [NKI5] `get` must return all events when permissions are defined for \"all streams\" (*)",
        "duration": 14,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FZ97] `get` must only return events with accessible tags",
        "fullTitle": "Access permissions Events [FZ97] `get` must only return events with accessible tags",
        "duration": 16,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1DH6] `get` must only return events in accessible streams *and* with accessible tags when both are defined",
        "fullTitle": "Access permissions Events [1DH6] `get` must only return events in accessible streams *and* with accessible tags when both are defined",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5360] `get` (or any request) must alternatively accept the access token in the query string",
        "fullTitle": "Access permissions Events [5360] `get` (or any request) must alternatively accept the access token in the query string",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KTM1] must forbid getting an attached file if permissions are insufficient",
        "fullTitle": "Access permissions Events [KTM1] must forbid getting an attached file if permissions are insufficient",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2773] must forbid creating events for 'read-only' streams",
        "fullTitle": "Access permissions Events [2773] must forbid creating events for 'read-only' streams",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y0TI] must forbid creating events for 'read-only' tags",
        "fullTitle": "Access permissions Events [Y0TI] must forbid creating events for 'read-only' tags",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZKZZ] must forbid updating events for 'read-only' streams",
        "fullTitle": "Access permissions Events [ZKZZ] must forbid updating events for 'read-only' streams",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9LKQ] must forbid updating events for 'read-only' tags",
        "fullTitle": "Access permissions Events [9LKQ] must forbid updating events for 'read-only' tags",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RHFS] must forbid stopping events for 'read-only' streams",
        "fullTitle": "Access permissions Events [RHFS] must forbid stopping events for 'read-only' streams",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3SGZ] must forbid stopping events for 'read-only' tags",
        "fullTitle": "Access permissions Events [3SGZ] must forbid stopping events for 'read-only' tags",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4H62] must forbid deleting events for 'read-only' streams",
        "fullTitle": "Access permissions Events [4H62] must forbid deleting events for 'read-only' streams",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GBKV] must forbid deleting events for 'read-only' tags",
        "fullTitle": "Access permissions Events [GBKV] must forbid deleting events for 'read-only' tags",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y38T] must allow creating events for 'contribute' streams",
        "fullTitle": "Access permissions Events [Y38T] must allow creating events for 'contribute' streams",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NIDD] must allow creating events for 'contribute' tags",
        "fullTitle": "Access permissions Events [NIDD] must allow creating events for 'contribute' tags",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BSFP] `get` must only return streams for which permissions are defined",
        "fullTitle": "Access permissions Streams [BSFP] `get` must only return streams for which permissions are defined",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R4IA] must forbid creating child streams in 'read-only' streams",
        "fullTitle": "Access permissions Streams [R4IA] must forbid creating child streams in 'read-only' streams",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KHI7] must forbid creating child streams in 'contribute' streams",
        "fullTitle": "Access permissions Streams [KHI7] must forbid creating child streams in 'contribute' streams",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MCDP] must forbid deleting child streams in 'contribute' streams",
        "fullTitle": "Access permissions Streams [MCDP] must forbid deleting child streams in 'contribute' streams",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7B6P] must forbid updating 'contribute' streams",
        "fullTitle": "Access permissions Streams [7B6P] must forbid updating 'contribute' streams",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RG5R] must forbid deleting 'contribute' streams",
        "fullTitle": "Access permissions Streams [RG5R] must forbid deleting 'contribute' streams",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O1AZ] must allow creating child streams in 'managed' streams",
        "fullTitle": "Access permissions Streams [O1AZ] must allow creating child streams in 'managed' streams",
        "duration": 34,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5QPU] must forbid moving streams into non-'managed' parent streams",
        "fullTitle": "Access permissions Streams [5QPU] must forbid moving streams into non-'managed' parent streams",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KP1Q] must allow deleting child streams in 'managed' streams",
        "fullTitle": "Access permissions Streams [KP1Q] must allow deleting child streams in 'managed' streams",
        "duration": 25,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HHSS] must recursively apply permissions to the streams' child streams",
        "fullTitle": "Access permissions Streams [HHSS] must recursively apply permissions to the streams' child streams",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NJ1A] must allow access to all streams when no specific stream permissions are defined",
        "fullTitle": "Access permissions Streams [NJ1A] must allow access to all streams when no specific stream permissions are defined",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZGK0] must allow access to all streams when only tag permissions are defined",
        "fullTitle": "Access permissions Streams [ZGK0] must allow access to all streams when only tag permissions are defined",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UYB2] must only allow access to set streams when both tag and stream permissions are defined",
        "fullTitle": "Access permissions Streams [UYB2] must only allow access to set streams when both tag and stream permissions are defined",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YE49] must handle optional caller id in auth (in addition to token)",
        "fullTitle": "Access permissions Auth and change tracking [YE49] must handle optional caller id in auth (in addition to token)",
        "duration": 24,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IA9K] must be supported and deny access when failing",
        "fullTitle": "Access permissions Auth and change tracking custom auth step (e.g. to validate/parse caller id) [IA9K] must be supported and deny access when failing",
        "duration": 74,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H58R] must allow access when successful",
        "fullTitle": "Access permissions Auth and change tracking custom auth step (e.g. to validate/parse caller id) [H58R] must allow access when successful",
        "duration": 35,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ISE4] must fail properly (i.e. not granting access) when the custom function crashes",
        "fullTitle": "Access permissions Auth and change tracking custom auth step (e.g. to validate/parse caller id) [ISE4] must fail properly (i.e. not granting access) when the custom function crashes",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P4OM] must validate the custom function at startup time",
        "fullTitle": "Access permissions Auth and change tracking custom auth step (e.g. to validate/parse caller id) [P4OM] must validate the custom function at startup time",
        "duration": 614,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FWG1] must return publicly shared key-value profile info",
        "fullTitle": "profile (app) GET /public [FWG1] must return publicly shared key-value profile info",
        "duration": 56,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[13DL] must return key-value settings for the current app",
        "fullTitle": "profile (app) GET /app [13DL] must return key-value settings for the current app",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J37U] must refuse requests with a shared access token",
        "fullTitle": "profile (app) GET /app [J37U] must refuse requests with a shared access token",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GYBN] must refuse requests with a personal access token",
        "fullTitle": "profile (app) GET /app [GYBN] must refuse requests with a personal access token",
        "duration": 121,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1QFB] must add/update/remove the specified keys without touching the others",
        "fullTitle": "profile (app) PUT /app [1QFB] must add/update/remove the specified keys without touching the others",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0H9A] must refuse requests with a shared access token",
        "fullTitle": "profile (app) PUT /app [0H9A] must refuse requests with a shared access token",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JC5F] must refuse requests with a personal access token",
        "fullTitle": "profile (app) PUT /app [JC5F] must refuse requests with a personal access token",
        "duration": 101,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J61R] /public must return publicly shared key-value profile info",
        "fullTitle": "profile (personal) GET [J61R] /public must return publicly shared key-value profile info",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HIMS] /private must return private key-value profile info",
        "fullTitle": "profile (personal) GET [HIMS] /private must return private key-value profile info",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[36B1] must return an appropriate error for other paths",
        "fullTitle": "profile (personal) GET [36B1] must return an appropriate error for other paths",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FUJA] \"private\" must be forbidden to non-personal accesses",
        "fullTitle": "profile (personal) GET [FUJA] \"private\" must be forbidden to non-personal accesses",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[M28R] /public must add/update/remove the specified keys without touching the others",
        "fullTitle": "profile (personal) PUT [M28R] /public must add/update/remove the specified keys without touching the others",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WU9C] /private must add/update/remove the specified keys without touching the others",
        "fullTitle": "profile (personal) PUT [WU9C] /private must add/update/remove the specified keys without touching the others",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2AS6] must create the profile if not existing",
        "fullTitle": "profile (personal) PUT [2AS6] must create the profile if not existing",
        "duration": 51,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q99E] must return an appropriate error for other paths",
        "fullTitle": "profile (personal) PUT [Q99E] must return an appropriate error for other paths",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[T565] must be forbidden to non-personal accesses",
        "fullTitle": "profile (personal) PUT [T565] must be forbidden to non-personal accesses",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NKHF] must return the result's content when not storing streams",
        "fullTitle": "Result toObject() [NKHF] must return the result's content when not storing streams",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MHAS] must return the result content when storing streams",
        "fullTitle": "Result toObject() [MHAS] must return the result content when storing streams",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6P4Z] must return an error object when attempting to serialize streams containing an amountof objects exceeding the limit",
        "fullTitle": "Result toObject() [6P4Z] must return an error object when attempting to serialize streams containing an amountof objects exceeding the limit",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TTEL] must return an error when storing piped streams",
        "fullTitle": "Result toObject() [TTEL] must return an error when storing piped streams",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UA7B] should return basic server meta information as JSON when requested",
        "fullTitle": "root GET / [UA7B] should return basic server meta information as JSON when requested",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TO50] should return basic server meta information as text otherwise",
        "fullTitle": "root GET / [TO50] should return basic server meta information as text otherwise",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TS3D] should return an error if trying to access an unknown user account",
        "fullTitle": "root GET / [TS3D] should return an error if trying to access an unknown user account",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TJHO] should return correct common HTTP headers + meta data in response body",
        "fullTitle": "root All requests: [TJHO] should return correct common HTTP headers + meta data in response body",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OQ3G] should return meta data in response body for errors as well",
        "fullTitle": "root All requests: [OQ3G] should return meta data in response body for errors as well",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P06Y] should properly translate the Host header's username (i.e. subdomain)",
        "fullTitle": "root All requests: [P06Y] should properly translate the Host header's username (i.e. subdomain)",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R3H5] should translate the username in subdomain also when it only contains numbers",
        "fullTitle": "root All requests: [R3H5] should translate the username in subdomain also when it only contains numbers",
        "duration": 109,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5IQK] should support POSTing \"urlencoded\" content with _json and _auth fields",
        "fullTitle": "root All requests: [5IQK] should support POSTing \"urlencoded\" content with _json and _auth fields",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2YEI] should support POSTing \"urlencoded\" content with _json, _method (PUT) and _auth fields",
        "fullTitle": "root All requests: [2YEI] should support POSTing \"urlencoded\" content with _json, _method (PUT) and _auth fields",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VJTP] should support POSTing \"urlencoded\" content with _json, _method (DELETE) and _auth fields",
        "fullTitle": "root All requests: [VJTP] should support POSTing \"urlencoded\" content with _json, _method (DELETE) and _auth fields",
        "duration": 56,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6D5O] should properly handle JSON errors when POSTing \"urlencoded\" content with _json field",
        "fullTitle": "root All requests: [6D5O] should properly handle JSON errors when POSTing \"urlencoded\" content with _json field",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J2WP] should update the access's \"last used\" time and *internal* request counters",
        "fullTitle": "root All requests: [J2WP] should update the access's \"last used\" time and *internal* request counters",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PDMA] should return OK",
        "fullTitle": "root OPTIONS / [PDMA] should return OK",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0MI8] must return current access information",
        "fullTitle": "root GET /access-info [0MI8] must return current access information",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ORT3] must execute the given method calls and return the results",
        "fullTitle": "root POST / (i.e. batch call) [ORT3] must execute the given method calls and return the results",
        "duration": 80,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TVPI] must execute the method calls containing events.get and return the results",
        "fullTitle": "root POST / (i.e. batch call) [TVPI] must execute the method calls containing events.get and return the results",
        "duration": 67,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WGVY] must return an error if the sent data is badly formatted",
        "fullTitle": "root POST / (i.e. batch call) [WGVY] must return an error if the sent data is badly formatted",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[25M0] must dynamically create a namespace for the user",
        "fullTitle": "Socket.IO [25M0] must dynamically create a namespace for the user",
        "duration": 41,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VGKH] must connect to a user with a dash in the username",
        "fullTitle": "Socket.IO [VGKH] must connect to a user with a dash in the username",
        "duration": 154,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OSOT] must refuse connection if no valid access token is provided",
        "fullTitle": "Socket.IO [OSOT] must refuse connection if no valid access token is provided",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FI6F] must properly route method call messages for events and return the results, including meta",
        "fullTitle": "Socket.IO calling API methods [FI6F] must properly route method call messages for events and return the results, including meta",
        "duration": 20,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O3SW] must properly route method call messages for streams and return the results",
        "fullTitle": "Socket.IO calling API methods [O3SW] must properly route method call messages for streams and return the results",
        "duration": 13,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NGUZ] must not crash when callers omit the callback",
        "fullTitle": "Socket.IO calling API methods [NGUZ] must not crash when callers omit the callback",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ACA3] must fail if the called target does not exist",
        "fullTitle": "Socket.IO calling API methods [ACA3] must fail if the called target does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L8WJ] must fail if the called method does not exist",
        "fullTitle": "Socket.IO calling API methods [L8WJ] must fail if the called method does not exist",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SNCW] must return API errors properly, including meta",
        "fullTitle": "Socket.IO calling API methods [SNCW] must return API errors properly, including meta",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[744Z] must notify other sockets for the same user about events changes",
        "fullTitle": "Socket.IO calling API methods [744Z] must notify other sockets for the same user about events changes",
        "duration": 38,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GJLT] must notify other sockets for the same user (only) about streams changes",
        "fullTitle": "Socket.IO calling API methods [GJLT] must notify other sockets for the same user (only) about streams changes",
        "duration": 104,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JC99] must notify on each change",
        "fullTitle": "Socket.IO calling API methods [JC99] must notify on each change",
        "duration": 58,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JJRA] changes made in A notify clients of B",
        "fullTitle": "Socket.IO when spawning 2 api-server processes, A and B [JJRA] changes made in A notify clients of B",
        "duration": 130,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TG78] must return non-trashed streams (as a tree) by default",
        "fullTitle": "streams GET / [TG78] must return non-trashed streams (as a tree) by default",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DPWG] must return all streams (trashed or not) when requested",
        "fullTitle": "streams GET / [DPWG] must return all streams (trashed or not) when requested",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RDD5] must include stream deletions (since the given time) when requested",
        "fullTitle": "streams GET / [RDD5] must include stream deletions (since the given time) when requested",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[T8AM] must include stream deletions even when the given time is 0",
        "fullTitle": "streams GET / [T8AM] must include stream deletions even when the given time is 0",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[W9VC] must return a correct 401 error if no access token is provided",
        "fullTitle": "streams GET / [W9VC] must return a correct 401 error if no access token is provided",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UVWK] must return child streams when providing a parent stream id",
        "fullTitle": "streams GET / [UVWK] must return child streams when providing a parent stream id",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AJZL] must return a correct error if the parent stream is unknown",
        "fullTitle": "streams GET / [AJZL] must return a correct error if the parent stream is unknown",
        "duration": 20,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ENVV] must create a new \"root\" stream with the sent data, returning it",
        "fullTitle": "streams POST / [ENVV] must create a new \"root\" stream with the sent data, returning it",
        "duration": 40,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A2HP] must return a correct error if the sent data is badly formatted",
        "fullTitle": "streams POST / [A2HP] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GGS3] must return a correct error if a stream with the same id already exists",
        "fullTitle": "streams POST / [GGS3] must return a correct error if a stream with the same id already exists",
        "duration": 24,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UHKI] must allow reuse of deleted ids",
        "fullTitle": "streams POST / [UHKI] must allow reuse of deleted ids",
        "duration": 49,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8WGG] must accept explicit null for optional fields",
        "fullTitle": "streams POST / [8WGG] must accept explicit null for optional fields",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NR4D] must fail if a sibling stream with the same name already exists",
        "fullTitle": "streams POST / [NR4D] must fail if a sibling stream with the same name already exists",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JINC] must return a correct error if the sent data is not valid JSON",
        "fullTitle": "streams POST / [JINC] must return a correct error if the sent data is not valid JSON",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CHDM] must create a new child stream (with predefined id) when providing a parent stream id",
        "fullTitle": "streams POST / [CHDM] must create a new child stream (with predefined id) when providing a parent stream id",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[88VQ] must return an error if the new stream's parentId is the empty string",
        "fullTitle": "streams POST / [88VQ] must return an error if the new stream's parentId is the empty string",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[84RK] must slugify the new stream's predefined id",
        "fullTitle": "streams POST / [84RK] must slugify the new stream's predefined id",
        "duration": 32,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2B3H] must return a correct error if the parent stream is unknown",
        "fullTitle": "streams POST / [2B3H] must return a correct error if the parent stream is unknown",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8JB5] must return a correct error if the given predefined stream's id is \"null\"",
        "fullTitle": "streams POST / [8JB5] must return a correct error if the given predefined stream's id is \"null\"",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6TPQ] must return a correct error if the given predefined stream's id is \"*\"",
        "fullTitle": "streams POST / [6TPQ] must return a correct error if the given predefined stream's id is \"*\"",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SO48] must modify the stream with the sent data",
        "fullTitle": "streams PUT /<id> [SO48] must modify the stream with the sent data",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5KNJ] must accept explicit null for optional fields",
        "fullTitle": "streams PUT /<id> [5KNJ] must accept explicit null for optional fields",
        "duration": 29,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0ANV] must add/update/remove the specified client data fields without touching the others",
        "fullTitle": "streams PUT /<id> [0ANV] must add/update/remove the specified client data fields without touching the others",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PL2G] must return a correct error if the stream does not exist",
        "fullTitle": "streams PUT /<id> [PL2G] must return a correct error if the stream does not exist",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JWT4] must return a correct error if the sent data is badly formatted",
        "fullTitle": "streams PUT /<id> [JWT4] must return a correct error if the sent data is badly formatted",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[344I] must fail if a sibling stream with the same name already exists",
        "fullTitle": "streams PUT /<id> [344I] must fail if a sibling stream with the same name already exists",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PT1E] must move the stream under the given parent when specified",
        "fullTitle": "streams PUT /<id> [PT1E] must move the stream under the given parent when specified",
        "duration": 35,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HJBH] must return a correct error if the new parent stream is unknown",
        "fullTitle": "streams PUT /<id> [HJBH] must return a correct error if the new parent stream is unknown",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PN1H] must fail and throw a forbidden error in strict mode",
        "fullTitle": "streams PUT /<id> forbidden updates of protected fields [PN1H] must fail and throw a forbidden error in strict mode",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[A3WC] must succeed by ignoring protected fields and log a warning in non-strict mode",
        "fullTitle": "streams PUT /<id> forbidden updates of protected fields [A3WC] must succeed by ignoring protected fields and log a warning in non-strict mode",
        "duration": 1058,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[205A] must flag the specified stream as trashed",
        "fullTitle": "streams DELETE /<id> [205A] must flag the specified stream as trashed",
        "duration": 36,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TEFF] must delete the stream when already trashed with its descendants if there are no linked events",
        "fullTitle": "streams DELETE /<id> [TEFF] must delete the stream when already trashed with its descendants if there are no linked events",
        "duration": 59,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LVTR] must return a correct error if there are linked events and the related parameter is missing",
        "fullTitle": "streams DELETE /<id> [LVTR] must return a correct error if there are linked events and the related parameter is missing",
        "duration": 27,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RKEU] must reject the deletion of a root stream with mergeEventsWithParent=true",
        "fullTitle": "streams DELETE /<id> [RKEU] must reject the deletion of a root stream with mergeEventsWithParent=true",
        "duration": 27,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[26V0] must reassign the linked events to the deleted stream's parent when specified",
        "fullTitle": "streams DELETE /<id> [26V0] must reassign the linked events to the deleted stream's parent when specified",
        "duration": 61,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KLD8] must delete the linked events when mergeEventsWithParent is false",
        "fullTitle": "streams DELETE /<id> [KLD8] must delete the linked events when mergeEventsWithParent is false",
        "duration": 132,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1U1M] must return a correct error if the item is unknown",
        "fullTitle": "streams DELETE /<id> [1U1M] must return a correct error if the item is unknown",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0G7C] must not send a welcome email if mailing is deactivated",
        "fullTitle": "system (ex-register) POST /create-user [0G7C] must not send a welcome email if mailing is deactivated",
        "duration": 1224,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TWBF] must not send a welcome email if welcome mail is deactivated",
        "fullTitle": "system (ex-register) POST /create-user [TWBF] must not send a welcome email if welcome mail is deactivated",
        "duration": 1237,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FUTR] must create a new user with the sent data, sending a welcome email",
        "fullTitle": "system (ex-register) POST /create-user when email sending really works [FUTR] must create a new user with the sent data, sending a welcome email",
        "duration": 1352,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9K71] must run the process but not save anything for test username \"recla\"",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [9K71] must run the process but not save anything for test username \"recla\"",
        "duration": 1242,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZG1L] must support the old \"/register\" path for backwards-compatibility",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [ZG1L] must support the old \"/register\" path for backwards-compatibility",
        "duration": 66,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VGF5] must return a correct 400 error if the sent data is badly formatted",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [VGF5] must return a correct 400 error if the sent data is badly formatted",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ABI5] must return a correct 400 error if the language property is above 5 characters",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [ABI5] must return a correct 400 error if the language property is above 5 characters",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OVI4] must return a correct 400 error if the language property is the empty string",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [OVI4] must return a correct 400 error if the language property is the empty string",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RD10] must return a correct 400 error if a user with the same user name already exists",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [RD10] must return a correct 400 error if a user with the same user name already exists",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NPJE] must return a correct 400 error if a user with the same email address already exists",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [NPJE] must return a correct 400 error if a user with the same email address already exists",
        "duration": 6,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y5JB] must return a correct 404 error when authentication is invalid",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [Y5JB] must return a correct 404 error when authentication is invalid",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GF3L] must return a correct error if the content type is wrong",
        "fullTitle": "system (ex-register) POST /create-user when it just replies OK [GF3L] must return a correct error if the content type is wrong",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y69B] must replace the passwordHash in the logs by (hidden) when the authentication is invalid",
        "fullTitle": "system (ex-register) POST /create-user when we log into a temporary log file [Y69B] must replace the passwordHash in the logs by (hidden) when the authentication is invalid",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[MEJ9] must replace the passwordHash in the logs by (hidden) when the payload is invalid (here parameters)",
        "fullTitle": "system (ex-register) POST /create-user when we log into a temporary log file [MEJ9] must replace the passwordHash in the logs by (hidden) when the payload is invalid (here parameters)",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CO6H] must not mention the passwordHash in the logs when none is provided",
        "fullTitle": "system (ex-register) POST /create-user when we log into a temporary log file [CO6H] must not mention the passwordHash in the logs when none is provided",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9C1A] must return user information (including time of last account use)",
        "fullTitle": "system (ex-register) GET /user-info/{username} [9C1A] must return user information (including time of last account use)",
        "duration": 83,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FNJ5] must return a correct 404 error when authentication is invalid",
        "fullTitle": "system (ex-register) GET /user-info/{username} [FNJ5] must return a correct 404 error when authentication is invalid",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GY5H] should parse file uploads",
        "fullTitle": "uploads middleware hasFileUpload [GY5H] should parse file uploads",
        "duration": 19,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[B76G] notifies internal listeners",
        "fullTitle": "Notifications #serverReady [B76G] notifies internal listeners",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SRAU] notifies axon listeners",
        "fullTitle": "Notifications #serverReady [SRAU] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P6ZD] notifies internal listeners",
        "fullTitle": "Notifications #accountChanged [P6ZD] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q96S] notifies axon listeners",
        "fullTitle": "Notifications #accountChanged [Q96S] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[P5CG] notifies internal listeners",
        "fullTitle": "Notifications #accessesChanged [P5CG] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VSN6] notifies axon listeners",
        "fullTitle": "Notifications #accessesChanged [VSN6] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VU4A] notifies internal listeners",
        "fullTitle": "Notifications #followedSlicesChanged [VU4A] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UD2B] notifies axon listeners",
        "fullTitle": "Notifications #followedSlicesChanged [UD2B] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LDUQ] notifies internal listeners",
        "fullTitle": "Notifications #streamsChanged [LDUQ] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[BUR1] notifies axon listeners",
        "fullTitle": "Notifications #streamsChanged [BUR1] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[N8RI] notifies internal listeners",
        "fullTitle": "Notifications #eventsChanged [N8RI] notifies internal listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[TRMW] notifies axon listeners",
        "fullTitle": "Notifications #eventsChanged [TRMW] notifies axon listeners",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IKAI] returns true if all properties exist",
        "fullTitle": "Authentication hasProperties [IKAI] returns true if all properties exist",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[K2PZ] returns false if not all properties exist",
        "fullTitle": "Authentication hasProperties [K2PZ] returns false if not all properties exist",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U2NA] returns false if null is given",
        "fullTitle": "Authentication hasProperties [U2NA] returns false if null is given",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WJ7J] returns false if a string is given",
        "fullTitle": "Authentication hasProperties [WJ7J] returns false if a string is given",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DTZ1] should behave as documented in the method",
        "fullTitle": "tryCoerceStringValues [DTZ1] should behave as documented in the method",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[X26S] doesn't create keys in object",
        "fullTitle": "tryCoerceStringValues [X26S] doesn't create keys in object",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4MHH] should convert to array",
        "fullTitle": "tryCoerceStringValues [4MHH] should convert to array",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[X8PY] number conversion works",
        "fullTitle": "tryCoerceStringValues [X8PY] number conversion works",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S386] should construct",
        "fullTitle": "NatsPublisher [S386] should construct",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[I21M] delivers messages to \"USERNAME.sok1\"",
        "fullTitle": "NatsPublisher [I21M] delivers messages to \"USERNAME.sok1\"",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DMMP] should construct",
        "fullTitle": "NatsSubscriber [DMMP] should construct",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[4MAI] accepts messages from USERNAME.sok1 and dispatches them to sinks",
        "fullTitle": "NatsSubscriber when subscribed to \"foobar\" subscribe(\"USERNAME\") [4MAI] accepts messages from USERNAME.sok1 and dispatches them to sinks",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[47BP] ignores messages from other users",
        "fullTitle": "NatsSubscriber when subscribed to \"foobar\" subscribe(\"USERNAME\") [47BP] ignores messages from other users",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L49E] should unsubscribe from NATS",
        "fullTitle": "NatsSubscriber when subscribed to \"foobar\" unsubscribe() [L49E] should unsubscribe from NATS",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "componentName": "api-server"
  },
  {
    "stats": {
      "suites": 22,
      "tests": 43,
      "passes": 39,
      "pending": 0,
      "failures": 4,
      "start": "2019-05-07T06:15:57.357Z",
      "end": "2019-05-07T06:15:57.538Z",
      "duration": 181
    },
    "tests": [
      {
        "title": "[8GFH] should allow writing to a series",
        "fullTitle": "Manage InfluxDB data (business.series.*) [8GFH] should allow writing to a series",
        "duration": 47,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QJ6L] should parse the happy case",
        "fullTitle": "BatchRequest .parse [QJ6L] should parse the happy case",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VV2O] accepts an empty batch",
        "fullTitle": "BatchRequest .parse [VV2O] accepts an empty batch",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0NWO] throws if format is missing or wrong",
        "fullTitle": "BatchRequest .parse [0NWO] throws if format is missing or wrong",
        "duration": 2,
        "currentRetry": 0,
        "err": {
          "message": "expected [Function] to throw ParseFailure",
          "showDiff": true,
          "expected": "class ParseFailure extends Error {}",
          "stack": "AssertionError: expected [Function] to throw ParseFailure\n    at bad (test/unit/series/batch_request.test.js:64:14)\n    at Context.it (test/unit/series/batch_request.test.js:48:7)"
        }
      },
      {
        "title": "[881Y] throws if another type is passed in",
        "fullTitle": "BatchRequest .parse [881Y] throws if another type is passed in",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2PZ0] throws if envelope doesn't have a data attribute",
        "fullTitle": "BatchRequest .parse [2PZ0] throws if envelope doesn't have a data attribute",
        "duration": 0,
        "currentRetry": 0,
        "err": {
          "message": "expected [Function] to throw ParseFailure",
          "showDiff": true,
          "expected": "class ParseFailure extends Error {}",
          "stack": "AssertionError: expected [Function] to throw ParseFailure\n    at bad (test/unit/series/batch_request.test.js:64:14)\n    at Context.it (test/unit/series/batch_request.test.js:57:7)"
        }
      },
      {
        "title": "[AGQK] should parse a good looking object",
        "fullTitle": "BatchRequestElement .parse(obj) [AGQK] should parse a good looking object",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LWME] fails if input is not an Object",
        "fullTitle": "BatchRequestElement .parse(obj) [LWME] fails if input is not an Object",
        "duration": 0,
        "currentRetry": 0,
        "err": {
          "message": "expected [Function] to throw ParseFailure",
          "showDiff": true,
          "expected": "class ParseFailure extends Error {}",
          "stack": "AssertionError: expected [Function] to throw ParseFailure\n    at bad (test/unit/series/batch_request.test.js:103:14)\n    at Context.it (test/unit/series/batch_request.test.js:94:7)"
        }
      },
      {
        "title": "[BU7Q] fails if eventId is missing or the wrong type",
        "fullTitle": "BatchRequestElement .parse(obj) [BU7Q] fails if eventId is missing or the wrong type",
        "duration": 0,
        "currentRetry": 0,
        "err": {
          "message": "expected [Function] to throw ParseFailure",
          "showDiff": true,
          "expected": "class ParseFailure extends Error {}",
          "stack": "AssertionError: expected [Function] to throw ParseFailure\n    at bad (test/unit/series/batch_request.test.js:103:14)\n    at Context.it (test/unit/series/batch_request.test.js:98:7)"
        }
      },
      {
        "title": "[576J] should accept the happy path",
        "fullTitle": "DataMatrix .parse(obj) [576J] should accept the happy path",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IQTE] refuses if not an object",
        "fullTitle": "DataMatrix .parse(obj) [IQTE] refuses if not an object",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WQGB] refuses if format is not flatJSON",
        "fullTitle": "DataMatrix .parse(obj) [WQGB] refuses if format is not flatJSON",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[34RS] refuses if fields are not strings",
        "fullTitle": "DataMatrix .parse(obj) [34RS] refuses if fields are not strings",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[M5BI] refuses if points is not an array",
        "fullTitle": "DataMatrix .parse(obj) [M5BI] refuses if points is not an array",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V0SH] refuses if field names are not correct",
        "fullTitle": "DataMatrix .parse(obj) [V0SH] refuses if field names are not correct",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SBU1] refuses if data cannot be coerced",
        "fullTitle": "DataMatrix .parse(obj) [SBU1] refuses if data cannot be coerced",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QUQ3] should iterate over all matrix rows",
        "fullTitle": "DataMatrix #eachRow [QUQ3] should iterate over all matrix rows",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L03R] should call fn for each cell",
        "fullTitle": "DataMatrix #transform [L03R] should call fn for each cell",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7BRV] should store the return value in the matrix",
        "fullTitle": "DataMatrix #transform [7BRV] should store the return value in the matrix",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QGY6] returns the minimum and maximum timestamp used",
        "fullTitle": "DataMatrix #minmax() [QGY6] returns the minimum and maximum timestamp used",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ROK8] throws an error if the matrix is empty",
        "fullTitle": "DataMatrix #minmax() [ROK8] throws an error if the matrix is empty",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[79DA] throws an error if the timestamp is missing",
        "fullTitle": "DataMatrix #minmax() [79DA] throws an error if the timestamp is missing",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NJ4G] should return a js object for the row",
        "fullTitle": "business.series.Row toStruct [NJ4G] should return a js object for the row",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0UEA] should produce series objects for events",
        "fullTitle": "business.series.Repository with stubbed out connection [0UEA] should produce series objects for events",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WMDW] should work (must be called manually)",
        "fullTitle": "business.types.TypeRepository type list update [WMDW] should work (must be called manually)",
        "duration": 86,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6VL6] should fail gracefully",
        "fullTitle": "business.types.TypeRepository type list update [6VL6] should fail gracefully",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EEWV] should be known",
        "fullTitle": "business.types.TypeRepository basic types like mass/kg [EEWV] should be known",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J0CJ] should return a type instance allowing conversion",
        "fullTitle": "business.types.TypeRepository basic types like mass/kg [J0CJ] should return a type instance allowing conversion",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8WI1] should throw when conversion fails",
        "fullTitle": "business.types.TypeRepository basic types like mass/kg [8WI1] should throw when conversion fails",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WKCS] should coerce to number during validation",
        "fullTitle": "business.types.TypeRepository basic types like mass/kg [WKCS] should coerce to number during validation",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[05LA] should be known",
        "fullTitle": "business.types.TypeRepository complex types like position/wgs84 [05LA] should be known",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0QZ3] should return a complex type instance",
        "fullTitle": "business.types.TypeRepository complex types like position/wgs84 [0QZ3] should return a complex type instance",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D0GT] should return the correct value type for all fields",
        "fullTitle": "business.types.TypeRepository complex types on several levels like message/facebook [D0GT] should return the correct value type for all fields",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3BC9] should return the correct value type for optional fields",
        "fullTitle": "business.types.TypeRepository complex types on several levels like message/facebook [3BC9] should return the correct value type for optional fields",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IVPF] should resolve nested fields",
        "fullTitle": "business.types.TypeRepository complex types on several levels like message/facebook [IVPF] should resolve nested fields",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5PMM] does NOT handle requiredFields fully yet: only surface requirements are returned",
        "fullTitle": "business.types.TypeRepository complex types on several levels like message/facebook [5PMM] does NOT handle requiredFields fully yet: only surface requirements are returned",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[78HI] should be known",
        "fullTitle": "business.types.TypeRepository placeholder types like picture/attached [78HI] should be known",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[85BQ] should return a type instance allowing conversion",
        "fullTitle": "business.types.TypeRepository placeholder types like picture/attached [85BQ] should return a type instance allowing conversion",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SQNQ] should be known",
        "fullTitle": "business.types.TypeRepository series types like series:mass/kg [SQNQ] should be known",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IR3B] should inform about fields correctly",
        "fullTitle": "business.types.TypeRepository series types like series:mass/kg [IR3B] should inform about fields correctly",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AE3Q] should be produced via a type repository",
        "fullTitle": "business.types.TypeValidator [AE3Q] should be produced via a type repository",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JT1F] should validate simple types",
        "fullTitle": "business.types.TypeValidator [JT1F] should validate simple types",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QIVH] should validate complex types",
        "fullTitle": "business.types.TypeValidator [QIVH] should validate complex types",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "pending": [],
    "failures": [
      {
        "title": "[0NWO] throws if format is missing or wrong",
        "fullTitle": "BatchRequest .parse [0NWO] throws if format is missing or wrong",
        "duration": 2,
        "currentRetry": 0,
        "err": {
          "message": "expected [Function] to throw ParseFailure",
          "showDiff": true,
          "expected": "class ParseFailure extends Error {}",
          "stack": "AssertionError: expected [Function] to throw ParseFailure\n    at bad (test/unit/series/batch_request.test.js:64:14)\n    at Context.it (test/unit/series/batch_request.test.js:48:7)"
        }
      },
      {
        "title": "[2PZ0] throws if envelope doesn't have a data attribute",
        "fullTitle": "BatchRequest .parse [2PZ0] throws if envelope doesn't have a data attribute",
        "duration": 0,
        "currentRetry": 0,
        "err": {
          "message": "expected [Function] to throw ParseFailure",
          "showDiff": true,
          "expected": "class ParseFailure extends Error {}",
          "stack": "AssertionError: expected [Function] to throw ParseFailure\n    at bad (test/unit/series/batch_request.test.js:64:14)\n    at Context.it (test/unit/series/batch_request.test.js:57:7)"
        }
      },
      {
        "title": "[LWME] fails if input is not an Object",
        "fullTitle": "BatchRequestElement .parse(obj) [LWME] fails if input is not an Object",
        "duration": 0,
        "currentRetry": 0,
        "err": {
          "message": "expected [Function] to throw ParseFailure",
          "showDiff": true,
          "expected": "class ParseFailure extends Error {}",
          "stack": "AssertionError: expected [Function] to throw ParseFailure\n    at bad (test/unit/series/batch_request.test.js:103:14)\n    at Context.it (test/unit/series/batch_request.test.js:94:7)"
        }
      },
      {
        "title": "[BU7Q] fails if eventId is missing or the wrong type",
        "fullTitle": "BatchRequestElement .parse(obj) [BU7Q] fails if eventId is missing or the wrong type",
        "duration": 0,
        "currentRetry": 0,
        "err": {
          "message": "expected [Function] to throw ParseFailure",
          "showDiff": true,
          "expected": "class ParseFailure extends Error {}",
          "stack": "AssertionError: expected [Function] to throw ParseFailure\n    at bad (test/unit/series/batch_request.test.js:103:14)\n    at Context.it (test/unit/series/batch_request.test.js:98:7)"
        }
      }
    ],
    "passes": [
      {
        "title": "[8GFH] should allow writing to a series",
        "fullTitle": "Manage InfluxDB data (business.series.*) [8GFH] should allow writing to a series",
        "duration": 47,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QJ6L] should parse the happy case",
        "fullTitle": "BatchRequest .parse [QJ6L] should parse the happy case",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VV2O] accepts an empty batch",
        "fullTitle": "BatchRequest .parse [VV2O] accepts an empty batch",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[881Y] throws if another type is passed in",
        "fullTitle": "BatchRequest .parse [881Y] throws if another type is passed in",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AGQK] should parse a good looking object",
        "fullTitle": "BatchRequestElement .parse(obj) [AGQK] should parse a good looking object",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[576J] should accept the happy path",
        "fullTitle": "DataMatrix .parse(obj) [576J] should accept the happy path",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IQTE] refuses if not an object",
        "fullTitle": "DataMatrix .parse(obj) [IQTE] refuses if not an object",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WQGB] refuses if format is not flatJSON",
        "fullTitle": "DataMatrix .parse(obj) [WQGB] refuses if format is not flatJSON",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[34RS] refuses if fields are not strings",
        "fullTitle": "DataMatrix .parse(obj) [34RS] refuses if fields are not strings",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[M5BI] refuses if points is not an array",
        "fullTitle": "DataMatrix .parse(obj) [M5BI] refuses if points is not an array",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V0SH] refuses if field names are not correct",
        "fullTitle": "DataMatrix .parse(obj) [V0SH] refuses if field names are not correct",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SBU1] refuses if data cannot be coerced",
        "fullTitle": "DataMatrix .parse(obj) [SBU1] refuses if data cannot be coerced",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QUQ3] should iterate over all matrix rows",
        "fullTitle": "DataMatrix #eachRow [QUQ3] should iterate over all matrix rows",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[L03R] should call fn for each cell",
        "fullTitle": "DataMatrix #transform [L03R] should call fn for each cell",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7BRV] should store the return value in the matrix",
        "fullTitle": "DataMatrix #transform [7BRV] should store the return value in the matrix",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QGY6] returns the minimum and maximum timestamp used",
        "fullTitle": "DataMatrix #minmax() [QGY6] returns the minimum and maximum timestamp used",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ROK8] throws an error if the matrix is empty",
        "fullTitle": "DataMatrix #minmax() [ROK8] throws an error if the matrix is empty",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[79DA] throws an error if the timestamp is missing",
        "fullTitle": "DataMatrix #minmax() [79DA] throws an error if the timestamp is missing",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NJ4G] should return a js object for the row",
        "fullTitle": "business.series.Row toStruct [NJ4G] should return a js object for the row",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0UEA] should produce series objects for events",
        "fullTitle": "business.series.Repository with stubbed out connection [0UEA] should produce series objects for events",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WMDW] should work (must be called manually)",
        "fullTitle": "business.types.TypeRepository type list update [WMDW] should work (must be called manually)",
        "duration": 86,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[6VL6] should fail gracefully",
        "fullTitle": "business.types.TypeRepository type list update [6VL6] should fail gracefully",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EEWV] should be known",
        "fullTitle": "business.types.TypeRepository basic types like mass/kg [EEWV] should be known",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[J0CJ] should return a type instance allowing conversion",
        "fullTitle": "business.types.TypeRepository basic types like mass/kg [J0CJ] should return a type instance allowing conversion",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8WI1] should throw when conversion fails",
        "fullTitle": "business.types.TypeRepository basic types like mass/kg [8WI1] should throw when conversion fails",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[WKCS] should coerce to number during validation",
        "fullTitle": "business.types.TypeRepository basic types like mass/kg [WKCS] should coerce to number during validation",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[05LA] should be known",
        "fullTitle": "business.types.TypeRepository complex types like position/wgs84 [05LA] should be known",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0QZ3] should return a complex type instance",
        "fullTitle": "business.types.TypeRepository complex types like position/wgs84 [0QZ3] should return a complex type instance",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D0GT] should return the correct value type for all fields",
        "fullTitle": "business.types.TypeRepository complex types on several levels like message/facebook [D0GT] should return the correct value type for all fields",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3BC9] should return the correct value type for optional fields",
        "fullTitle": "business.types.TypeRepository complex types on several levels like message/facebook [3BC9] should return the correct value type for optional fields",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IVPF] should resolve nested fields",
        "fullTitle": "business.types.TypeRepository complex types on several levels like message/facebook [IVPF] should resolve nested fields",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5PMM] does NOT handle requiredFields fully yet: only surface requirements are returned",
        "fullTitle": "business.types.TypeRepository complex types on several levels like message/facebook [5PMM] does NOT handle requiredFields fully yet: only surface requirements are returned",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[78HI] should be known",
        "fullTitle": "business.types.TypeRepository placeholder types like picture/attached [78HI] should be known",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[85BQ] should return a type instance allowing conversion",
        "fullTitle": "business.types.TypeRepository placeholder types like picture/attached [85BQ] should return a type instance allowing conversion",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SQNQ] should be known",
        "fullTitle": "business.types.TypeRepository series types like series:mass/kg [SQNQ] should be known",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IR3B] should inform about fields correctly",
        "fullTitle": "business.types.TypeRepository series types like series:mass/kg [IR3B] should inform about fields correctly",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AE3Q] should be produced via a type repository",
        "fullTitle": "business.types.TypeValidator [AE3Q] should be produced via a type repository",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JT1F] should validate simple types",
        "fullTitle": "business.types.TypeValidator [JT1F] should validate simple types",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QIVH] should validate complex types",
        "fullTitle": "business.types.TypeValidator [QIVH] should validate complex types",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "componentName": "business"
  },
  {
    "stats": {
      "suites": 26,
      "tests": 43,
      "passes": 43,
      "pending": 0,
      "failures": 0,
      "start": "2019-05-07T06:15:58.807Z",
      "end": "2019-05-07T06:16:05.738Z",
      "duration": 6931
    },
    "tests": [
      {
        "title": "[Q2IS] should store data correctly",
        "fullTitle": "Storing BATCH data in a HF series Use Case: Store data in InfluxDB, Verification on either half [Q2IS] should store data correctly",
        "duration": 122,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QHM5] should fail without 'Authorization' header",
        "fullTitle": "Storing BATCH data in a HF series POST /:user_name/series/batch [QHM5] should fail without 'Authorization' header",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R57L] fails",
        "fullTitle": "Storing BATCH data in a HF series POST /:user_name/series/batch when the token has no permissions on the event [R57L] fails",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OO01] should schedule a metadata update on every store",
        "fullTitle": "Storing BATCH data in a HF series POST /:user_name/series/batch when using a metadata updater stub [OO01] should schedule a metadata update on every store",
        "duration": 143,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[I2ZH] should refuse a query for an unknown user",
        "fullTitle": "Querying data from a HF series [I2ZH] should refuse a query for an unknown user",
        "duration": 48,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EYCA] should refuse a query missing the authorization token",
        "fullTitle": "Querying data from a HF series [EYCA] should refuse a query missing the authorization token",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OINY] should refuse a query containing an unauthorized token",
        "fullTitle": "Querying data from a HF series [OINY] should refuse a query containing an unauthorized token",
        "duration": 17,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q991] should return an unknown resource error when querying data for an nonexistent event id",
        "fullTitle": "Querying data from a HF series [Q991] should return an unknown resource error when querying data for an nonexistent event id",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QMC7] should refuse a query containing parameters with the wrong format",
        "fullTitle": "Querying data from a HF series [QMC7] should refuse a query containing parameters with the wrong format",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HGVV] should refuse a query when toTime is before fromTime",
        "fullTitle": "Querying data from a HF series [HGVV] should refuse a query when toTime is before fromTime",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GZIZ] should store data correctly",
        "fullTitle": "Storing data in a HF series Use Case: Store data in InfluxDB, Verification on either half [GZIZ] should store data correctly",
        "duration": 99,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KC15] should return data once stored",
        "fullTitle": "Storing data in a HF series Use Case: Store data in InfluxDB, Verification on either half [KC15] should return data once stored",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[N3PM] stores data into InfluxDB",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success [N3PM] stores data into InfluxDB",
        "duration": 52,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RESC] should reject non-JSON bodies",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success [RESC] should reject non-JSON bodies",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KT1R] responds with headers that allow CORS on OPTIONS",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success [KT1R] responds with headers that allow CORS on OPTIONS",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H1CG] responds with headers that allow CORS on POST",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success [H1CG] responds with headers that allow CORS on POST",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[96HC] should be rejected (format is not flatJSON)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [96HC] should be rejected (format is not flatJSON)",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[38W3] should be rejected (matrix is not square - not enough fields)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [38W3] should be rejected (matrix is not square - not enough fields)",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GJL4] should be rejected (value types are not all valid)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [GJL4] should be rejected (value types are not all valid)",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JJRO] should be rejected (missing timestamp column)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [JJRO] should be rejected (missing timestamp column)",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LKFG] should be rejected (missing value column for a simple input)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [LKFG] should be rejected (missing value column for a simple input)",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GU3L] should schedule a metadata update on every store",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when using a metadata updater stub [GU3L] should schedule a metadata update on every store",
        "duration": 29,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NLAW] refuses invalid/unauthorized accesses",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth failure [NLAW] refuses invalid/unauthorized accesses",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y3BL] stores data of any basic type",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [Y3BL] stores data of any basic type",
        "duration": 109,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3WGH] stores data of complex types",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [3WGH] stores data of complex types",
        "duration": 30,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1NDB] doesn't accept data in non-series format",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [1NDB] doesn't accept data in non-series format",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YMHK] stores strings",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [YMHK] stores strings",
        "duration": 39,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZL7C] stores floats",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [ZL7C] stores floats",
        "duration": 54,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DTZ2] refuses to store when timestamp is present twice (ambiguous!)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic [DTZ2] refuses to store when timestamp is present twice (ambiguous!)",
        "duration": 83,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UU4R] refuses to store when other fields are present twice (ambiguous!)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic [UU4R] refuses to store when other fields are present twice (ambiguous!)",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FNDT] refuses to store when not all required fields are given",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic when not all required fields are given [FNDT] refuses to store when not all required fields are given",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H525] returns error id \"invalid-request-structure\"",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic when not all required fields are given [H525] returns error id \"invalid-request-structure\"",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AJMS] refuses to store when field names don't match the type",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic when field names don't match the type [AJMS] refuses to store when field names don't match the type",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7CR7] returns the error message with the id \"invalid-request-structure\"",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic when field names don't match the type [7CR7] returns the error message with the id \"invalid-request-structure\"",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UDHO] allows storing any number of optional fields, on each request",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as position/wgs84 [UDHO] allows storing any number of optional fields, on each request",
        "duration": 107,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JDTH] refuses unknown fields",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as position/wgs84 [JDTH] refuses unknown fields",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U6F2] should allow write access to series",
        "fullTitle": "Metadata Loader [U6F2] should allow write access to series",
        "duration": 21,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O8AE] returns loaded metadata for N minutes",
        "fullTitle": "Metadata Cache [O8AE] returns loaded metadata for N minutes",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O84I] can be constructed",
        "fullTitle": "Server [O84I] can be constructed",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1VEL] starts a http server on configured port",
        "fullTitle": "Server .start [1VEL] starts a http server on configured port",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KEEZ] should have been loaded for test execution",
        "fullTitle": "Settings [KEEZ] should have been loaded for test execution",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3BYC] should reject queries if the authorization header is missing",
        "fullTitle": "Controller storeSeriesData [3BYC] should reject queries if the authorization header is missing",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U0WB] should reject queries if the eventId is missing",
        "fullTitle": "Controller storeSeriesData [U0WB] should reject queries if the eventId is missing",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "pending": [],
    "failures": [],
    "passes": [
      {
        "title": "[Q2IS] should store data correctly",
        "fullTitle": "Storing BATCH data in a HF series Use Case: Store data in InfluxDB, Verification on either half [Q2IS] should store data correctly",
        "duration": 122,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QHM5] should fail without 'Authorization' header",
        "fullTitle": "Storing BATCH data in a HF series POST /:user_name/series/batch [QHM5] should fail without 'Authorization' header",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[R57L] fails",
        "fullTitle": "Storing BATCH data in a HF series POST /:user_name/series/batch when the token has no permissions on the event [R57L] fails",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OO01] should schedule a metadata update on every store",
        "fullTitle": "Storing BATCH data in a HF series POST /:user_name/series/batch when using a metadata updater stub [OO01] should schedule a metadata update on every store",
        "duration": 143,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[I2ZH] should refuse a query for an unknown user",
        "fullTitle": "Querying data from a HF series [I2ZH] should refuse a query for an unknown user",
        "duration": 48,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EYCA] should refuse a query missing the authorization token",
        "fullTitle": "Querying data from a HF series [EYCA] should refuse a query missing the authorization token",
        "duration": 9,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OINY] should refuse a query containing an unauthorized token",
        "fullTitle": "Querying data from a HF series [OINY] should refuse a query containing an unauthorized token",
        "duration": 17,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q991] should return an unknown resource error when querying data for an nonexistent event id",
        "fullTitle": "Querying data from a HF series [Q991] should return an unknown resource error when querying data for an nonexistent event id",
        "duration": 33,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QMC7] should refuse a query containing parameters with the wrong format",
        "fullTitle": "Querying data from a HF series [QMC7] should refuse a query containing parameters with the wrong format",
        "duration": 11,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HGVV] should refuse a query when toTime is before fromTime",
        "fullTitle": "Querying data from a HF series [HGVV] should refuse a query when toTime is before fromTime",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GZIZ] should store data correctly",
        "fullTitle": "Storing data in a HF series Use Case: Store data in InfluxDB, Verification on either half [GZIZ] should store data correctly",
        "duration": 99,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KC15] should return data once stored",
        "fullTitle": "Storing data in a HF series Use Case: Store data in InfluxDB, Verification on either half [KC15] should return data once stored",
        "duration": 28,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[N3PM] stores data into InfluxDB",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success [N3PM] stores data into InfluxDB",
        "duration": 52,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RESC] should reject non-JSON bodies",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success [RESC] should reject non-JSON bodies",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KT1R] responds with headers that allow CORS on OPTIONS",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success [KT1R] responds with headers that allow CORS on OPTIONS",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H1CG] responds with headers that allow CORS on POST",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success [H1CG] responds with headers that allow CORS on POST",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[96HC] should be rejected (format is not flatJSON)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [96HC] should be rejected (format is not flatJSON)",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[38W3] should be rejected (matrix is not square - not enough fields)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [38W3] should be rejected (matrix is not square - not enough fields)",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GJL4] should be rejected (value types are not all valid)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [GJL4] should be rejected (value types are not all valid)",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JJRO] should be rejected (missing timestamp column)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [JJRO] should be rejected (missing timestamp column)",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LKFG] should be rejected (missing value column for a simple input)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when request is malformed [LKFG] should be rejected (missing value column for a simple input)",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GU3L] should schedule a metadata update on every store",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth success when using a metadata updater stub [GU3L] should schedule a metadata update on every store",
        "duration": 29,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[NLAW] refuses invalid/unauthorized accesses",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series bypassing authentication with auth failure [NLAW] refuses invalid/unauthorized accesses",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Y3BL] stores data of any basic type",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [Y3BL] stores data of any basic type",
        "duration": 109,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3WGH] stores data of complex types",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [3WGH] stores data of complex types",
        "duration": 30,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1NDB] doesn't accept data in non-series format",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [1NDB] doesn't accept data in non-series format",
        "duration": 23,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YMHK] stores strings",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [YMHK] stores strings",
        "duration": 39,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[ZL7C] stores floats",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series storing data in different formats [ZL7C] stores floats",
        "duration": 54,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DTZ2] refuses to store when timestamp is present twice (ambiguous!)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic [DTZ2] refuses to store when timestamp is present twice (ambiguous!)",
        "duration": 83,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UU4R] refuses to store when other fields are present twice (ambiguous!)",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic [UU4R] refuses to store when other fields are present twice (ambiguous!)",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FNDT] refuses to store when not all required fields are given",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic when not all required fields are given [FNDT] refuses to store when not all required fields are given",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[H525] returns error id \"invalid-request-structure\"",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic when not all required fields are given [H525] returns error id \"invalid-request-structure\"",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AJMS] refuses to store when field names don't match the type",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic when field names don't match the type [AJMS] refuses to store when field names don't match the type",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7CR7] returns the error message with the id \"invalid-request-structure\"",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as ratio/generic when field names don't match the type [7CR7] returns the error message with the id \"invalid-request-structure\"",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[UDHO] allows storing any number of optional fields, on each request",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as position/wgs84 [UDHO] allows storing any number of optional fields, on each request",
        "duration": 107,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JDTH] refuses unknown fields",
        "fullTitle": "Storing data in a HF series POST /events/EVENT_ID/series complex types such as position/wgs84 [JDTH] refuses unknown fields",
        "duration": 5,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U6F2] should allow write access to series",
        "fullTitle": "Metadata Loader [U6F2] should allow write access to series",
        "duration": 21,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O8AE] returns loaded metadata for N minutes",
        "fullTitle": "Metadata Cache [O8AE] returns loaded metadata for N minutes",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O84I] can be constructed",
        "fullTitle": "Server [O84I] can be constructed",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[1VEL] starts a http server on configured port",
        "fullTitle": "Server .start [1VEL] starts a http server on configured port",
        "duration": 12,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KEEZ] should have been loaded for test execution",
        "fullTitle": "Settings [KEEZ] should have been loaded for test execution",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3BYC] should reject queries if the authorization header is missing",
        "fullTitle": "Controller storeSeriesData [3BYC] should reject queries if the authorization header is missing",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[U0WB] should reject queries if the eventId is missing",
        "fullTitle": "Controller storeSeriesData [U0WB] should reject queries if the eventId is missing",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "componentName": "hfs-server"
  },
  {
    "stats": {
      "suites": 22,
      "tests": 26,
      "passes": 26,
      "pending": 0,
      "failures": 0,
      "start": "2019-05-07T06:16:07.227Z",
      "end": "2019-05-07T06:16:08.256Z",
      "duration": 1029
    },
    "tests": [
      {
        "title": "[POMC] allows scheduling an update",
        "fullTitle": "Metadata Updater [POMC] allows scheduling an update",
        "duration": 46,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9TJ0] starts a timer and runs #act every n ms",
        "fullTitle": "Metadata Updater/Controller #runEach(ms) [9TJ0] starts a timer and runs #act every n ms",
        "duration": 25,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2W9C] constructs an Flush operation for the update and returns it",
        "fullTitle": "Metadata Updater/Controller #flushOp(update) [2W9C] constructs an Flush operation for the update and returns it",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CIPH] pulls elapsed updates and flushes them to MongoDB",
        "fullTitle": "Metadata Updater/Controller #act [CIPH] pulls elapsed updates and flushes them to MongoDB",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9UOR] forwards calls",
        "fullTitle": "ErrorLogger [9UOR] forwards calls",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5AVE] catches and logs all exceptions, rethrowing afterwards",
        "fullTitle": "ErrorLogger [5AVE] catches and logs all exceptions, rethrowing afterwards",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9J9U] also works for async methods, waiting for the eventual result",
        "fullTitle": "ErrorLogger [9J9U] also works for async methods, waiting for the eventual result",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D5N1] writes event metadata to disk",
        "fullTitle": "Flush event with no existing metadata [D5N1] writes event metadata to disk",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5QO0] doesn't destroy old earliest and latest",
        "fullTitle": "Flush event with existing metadata [5QO0] doesn't destroy old earliest and latest",
        "duration": 13,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Z70F] leaves base data intact",
        "fullTitle": "Flush event with existing metadata [Z70F] leaves base data intact",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[80TC] returns the user id",
        "fullTitle": "UserRepository #resolve(name) [80TC] returns the user id",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8K9H] caches the user information for a while",
        "fullTitle": "UserRepository #resolve(name) [8K9H] caches the user information for a while",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RE2D] stores updates",
        "fullTitle": "PendingUpdatesMap #merge and #get [RE2D] stores updates",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JJ2Y] merges updates with preexisting updates via #merge",
        "fullTitle": "PendingUpdatesMap #merge and #get [JJ2Y] merges updates with preexisting updates via #merge",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O55W] returns all updates that should be flushed",
        "fullTitle": "PendingUpdatesMap #elapsed [O55W] returns all updates that should be flushed",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HWPP] uses #flushAt to determine deadlines",
        "fullTitle": "PendingUpdatesMap #elapsed [HWPP] uses #flushAt to determine deadlines",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[412V] constructively merges two updates",
        "fullTitle": "PendingUpdate #merge [412V] constructively merges two updates",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HS79] fails when key is not equal",
        "fullTitle": "PendingUpdate #merge [HS79] fails when key is not equal",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[79JJ] returns `cooldown` when deadline is far away",
        "fullTitle": "PendingUpdate #flushAt() [79JJ] returns `cooldown` when deadline is far away",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OQLP] returns `deadline` when deadline is < `cooldown`",
        "fullTitle": "PendingUpdate #flushAt() [OQLP] returns `deadline` when deadline is < `cooldown`",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LULP] returns a settings object for the log subsystem",
        "fullTitle": "Settings #getLogSettingsObject [LULP] returns a settings object for the log subsystem",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[02H5] loads settings from an extended JSON file",
        "fullTitle": "Settings #loadFromFile(json_file_path) [02H5] loads settings from an extended JSON file",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OA1D] loads settings from an extended HJSON file",
        "fullTitle": "Settings #loadFromFile(json_file_path) [OA1D] loads settings from an extended HJSON file",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3RHA] loads settings from an extended YAML file",
        "fullTitle": "Settings #loadFromFile(json_file_path) [3RHA] loads settings from an extended YAML file",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CW89] pops an item",
        "fullTitle": "Heap #pop [CW89] pops an item",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S15J] returns null if the heap is empty",
        "fullTitle": "Heap #pop [S15J] returns null if the heap is empty",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "pending": [],
    "failures": [],
    "passes": [
      {
        "title": "[POMC] allows scheduling an update",
        "fullTitle": "Metadata Updater [POMC] allows scheduling an update",
        "duration": 46,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9TJ0] starts a timer and runs #act every n ms",
        "fullTitle": "Metadata Updater/Controller #runEach(ms) [9TJ0] starts a timer and runs #act every n ms",
        "duration": 25,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2W9C] constructs an Flush operation for the update and returns it",
        "fullTitle": "Metadata Updater/Controller #flushOp(update) [2W9C] constructs an Flush operation for the update and returns it",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CIPH] pulls elapsed updates and flushes them to MongoDB",
        "fullTitle": "Metadata Updater/Controller #act [CIPH] pulls elapsed updates and flushes them to MongoDB",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9UOR] forwards calls",
        "fullTitle": "ErrorLogger [9UOR] forwards calls",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5AVE] catches and logs all exceptions, rethrowing afterwards",
        "fullTitle": "ErrorLogger [5AVE] catches and logs all exceptions, rethrowing afterwards",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[9J9U] also works for async methods, waiting for the eventual result",
        "fullTitle": "ErrorLogger [9J9U] also works for async methods, waiting for the eventual result",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D5N1] writes event metadata to disk",
        "fullTitle": "Flush event with no existing metadata [D5N1] writes event metadata to disk",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[5QO0] doesn't destroy old earliest and latest",
        "fullTitle": "Flush event with existing metadata [5QO0] doesn't destroy old earliest and latest",
        "duration": 13,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Z70F] leaves base data intact",
        "fullTitle": "Flush event with existing metadata [Z70F] leaves base data intact",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[80TC] returns the user id",
        "fullTitle": "UserRepository #resolve(name) [80TC] returns the user id",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[8K9H] caches the user information for a while",
        "fullTitle": "UserRepository #resolve(name) [8K9H] caches the user information for a while",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[RE2D] stores updates",
        "fullTitle": "PendingUpdatesMap #merge and #get [RE2D] stores updates",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[JJ2Y] merges updates with preexisting updates via #merge",
        "fullTitle": "PendingUpdatesMap #merge and #get [JJ2Y] merges updates with preexisting updates via #merge",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[O55W] returns all updates that should be flushed",
        "fullTitle": "PendingUpdatesMap #elapsed [O55W] returns all updates that should be flushed",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HWPP] uses #flushAt to determine deadlines",
        "fullTitle": "PendingUpdatesMap #elapsed [HWPP] uses #flushAt to determine deadlines",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[412V] constructively merges two updates",
        "fullTitle": "PendingUpdate #merge [412V] constructively merges two updates",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HS79] fails when key is not equal",
        "fullTitle": "PendingUpdate #merge [HS79] fails when key is not equal",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[79JJ] returns `cooldown` when deadline is far away",
        "fullTitle": "PendingUpdate #flushAt() [79JJ] returns `cooldown` when deadline is far away",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OQLP] returns `deadline` when deadline is < `cooldown`",
        "fullTitle": "PendingUpdate #flushAt() [OQLP] returns `deadline` when deadline is < `cooldown`",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[LULP] returns a settings object for the log subsystem",
        "fullTitle": "Settings #getLogSettingsObject [LULP] returns a settings object for the log subsystem",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[02H5] loads settings from an extended JSON file",
        "fullTitle": "Settings #loadFromFile(json_file_path) [02H5] loads settings from an extended JSON file",
        "duration": 8,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OA1D] loads settings from an extended HJSON file",
        "fullTitle": "Settings #loadFromFile(json_file_path) [OA1D] loads settings from an extended HJSON file",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[3RHA] loads settings from an extended YAML file",
        "fullTitle": "Settings #loadFromFile(json_file_path) [3RHA] loads settings from an extended YAML file",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CW89] pops an item",
        "fullTitle": "Heap #pop [CW89] pops an item",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S15J] returns null if the heap is empty",
        "fullTitle": "Heap #pop [S15J] returns null if the heap is empty",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "componentName": "metadata"
  },
  {
    "stats": {
      "suites": 6,
      "tests": 7,
      "passes": 7,
      "pending": 0,
      "failures": 0,
      "start": "2019-05-07T06:16:09.131Z",
      "end": "2019-05-07T06:16:09.238Z",
      "duration": 107
    },
    "tests": [
      {
        "title": "[W2BC] returns a version-string",
        "fullTitle": "ProjectVersion#version when no \".api-version\" file is available [W2BC] returns a version-string",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EGO7] returns a git describe string",
        "fullTitle": "ProjectVersion#version when no \".api-version\" file is available [EGO7] returns a git describe string",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HV40] reads .api-version and returns that constant",
        "fullTitle": "ProjectVersion#version when a \".api-version\" file exists in the project [HV40] reads .api-version and returns that constant",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KTG9] throws an error",
        "fullTitle": "ProjectVersion#version when neither method works [KTG9] throws an error",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V0R9] should not transform illegal usernames",
        "fullTitle": "subdomainToPath middleware using a minimal application [V0R9] should not transform illegal usernames",
        "duration": 26,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q5A5] should transform username into a path segment",
        "fullTitle": "subdomainToPath middleware using a minimal application [Q5A5] should transform username into a path segment",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IDDE] should accept dashes",
        "fullTitle": "subdomainToPath middleware using a minimal application [IDDE] should accept dashes",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "pending": [],
    "failures": [],
    "passes": [
      {
        "title": "[W2BC] returns a version-string",
        "fullTitle": "ProjectVersion#version when no \".api-version\" file is available [W2BC] returns a version-string",
        "duration": 22,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[EGO7] returns a git describe string",
        "fullTitle": "ProjectVersion#version when no \".api-version\" file is available [EGO7] returns a git describe string",
        "duration": 31,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[HV40] reads .api-version and returns that constant",
        "fullTitle": "ProjectVersion#version when a \".api-version\" file exists in the project [HV40] reads .api-version and returns that constant",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[KTG9] throws an error",
        "fullTitle": "ProjectVersion#version when neither method works [KTG9] throws an error",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V0R9] should not transform illegal usernames",
        "fullTitle": "subdomainToPath middleware using a minimal application [V0R9] should not transform illegal usernames",
        "duration": 26,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[Q5A5] should transform username into a path segment",
        "fullTitle": "subdomainToPath middleware using a minimal application [Q5A5] should transform username into a path segment",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[IDDE] should accept dashes",
        "fullTitle": "subdomainToPath middleware using a minimal application [IDDE] should accept dashes",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "componentName": "middleware"
  },
  {
    "stats": {
      "suites": 3,
      "tests": 4,
      "passes": 4,
      "pending": 0,
      "failures": 0,
      "start": "2019-05-07T06:16:09.717Z",
      "end": "2019-05-07T06:16:09.738Z",
      "duration": 21
    },
    "tests": [
      {
        "title": "[ZRW8] should parse token out",
        "fullTitle": "MethodContext #parseAuth [ZRW8] should parse token out",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AUIY] should also parse the callerId when available",
        "fullTitle": "MethodContext #parseAuth [AUIY] should also parse the callerId when available",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OJW2] checks expiry of the access",
        "fullTitle": "MethodContext #retrieveAccessFromId [OJW2] checks expiry of the access",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D0RZ] loads the access",
        "fullTitle": "MethodContext #retrieveAccessFromId [D0RZ] loads the access",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "pending": [],
    "failures": [],
    "passes": [
      {
        "title": "[ZRW8] should parse token out",
        "fullTitle": "MethodContext #parseAuth [ZRW8] should parse token out",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AUIY] should also parse the callerId when available",
        "fullTitle": "MethodContext #parseAuth [AUIY] should also parse the callerId when available",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OJW2] checks expiry of the access",
        "fullTitle": "MethodContext #retrieveAccessFromId [OJW2] checks expiry of the access",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[D0RZ] loads the access",
        "fullTitle": "MethodContext #retrieveAccessFromId [D0RZ] loads the access",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "componentName": "model"
  },
  {
    "stats": {
      "suites": 5,
      "tests": 16,
      "passes": 16,
      "pending": 0,
      "failures": 0,
      "start": "2019-05-07T06:16:10.557Z",
      "end": "2019-05-07T06:16:12.995Z",
      "duration": 2438
    },
    "tests": [
      {
        "title": "[NRT9] must return JPEG previews for \"picture/attached\" events and cache the result",
        "fullTitle": "event previews GET /<event id>/preview [NRT9] must return JPEG previews for \"picture/attached\" events and cache the result",
        "duration": 170,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FEWU] must accept \".jpg\" extension in the path (backwards-compatibility)",
        "fullTitle": "event previews GET /<event id>/preview [FEWU] must accept \".jpg\" extension in the path (backwards-compatibility)",
        "duration": 48,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PBC1] must adjust the desired size to the bigger standard size (if exists)",
        "fullTitle": "event previews GET /<event id>/preview [PBC1] must adjust the desired size to the bigger standard size (if exists)",
        "duration": 75,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[415L] must limit the desired size to the biggest standard size if too big",
        "fullTitle": "event previews GET /<event id>/preview [415L] must limit the desired size to the biggest standard size if too big",
        "duration": 113,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CWTQ] must serve the cached file if available",
        "fullTitle": "event previews GET /<event id>/preview [CWTQ] must serve the cached file if available",
        "duration": 55,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2MME] must regenerate the cached file if obsolete",
        "fullTitle": "event previews GET /<event id>/preview [2MME] must regenerate the cached file if obsolete",
        "duration": 115,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7Y91] must respond with \"no content\" if the event type is not supported",
        "fullTitle": "event previews GET /<event id>/preview [7Y91] must respond with \"no content\" if the event type is not supported",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[61N8] must return a proper error if the event does not exist",
        "fullTitle": "event previews GET /<event id>/preview [61N8] must return a proper error if the event does not exist",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VIJO] must forbid requests missing an access token",
        "fullTitle": "event previews GET /<event id>/preview [VIJO] must forbid requests missing an access token",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FAK4] must forbid requests with unauthorized accesses",
        "fullTitle": "event previews GET /<event id>/preview [FAK4] must forbid requests with unauthorized accesses",
        "duration": 13,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QUM3] must return a proper error if event data is corrupted (no attachment object)",
        "fullTitle": "event previews GET /<event id>/preview [QUM3] must return a proper error if event data is corrupted (no attachment object)",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DQF6] must return a proper error if event data is corrupted (no attached file)",
        "fullTitle": "event previews GET /<event id>/preview [DQF6] must return a proper error if event data is corrupted (no attached file)",
        "duration": 17,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GSDF] must work with animated GIFs too",
        "fullTitle": "event previews GET /<event id>/preview [GSDF] must work with animated GIFs too",
        "duration": 53,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FUYE] must clean up cached previews not accessed for one week by default",
        "fullTitle": "event previews POST /clean-up-cache [FUYE] must clean up cached previews not accessed for one week by default",
        "duration": 401,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G5JR] must ignore files with no readable extended attribute",
        "fullTitle": "event previews POST /clean-up-cache [G5JR] must ignore files with no readable extended attribute",
        "duration": 343,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[E5MW] should return OK",
        "fullTitle": "(index) OPTIONS / [E5MW] should return OK",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "pending": [],
    "failures": [],
    "passes": [
      {
        "title": "[NRT9] must return JPEG previews for \"picture/attached\" events and cache the result",
        "fullTitle": "event previews GET /<event id>/preview [NRT9] must return JPEG previews for \"picture/attached\" events and cache the result",
        "duration": 170,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FEWU] must accept \".jpg\" extension in the path (backwards-compatibility)",
        "fullTitle": "event previews GET /<event id>/preview [FEWU] must accept \".jpg\" extension in the path (backwards-compatibility)",
        "duration": 48,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PBC1] must adjust the desired size to the bigger standard size (if exists)",
        "fullTitle": "event previews GET /<event id>/preview [PBC1] must adjust the desired size to the bigger standard size (if exists)",
        "duration": 75,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[415L] must limit the desired size to the biggest standard size if too big",
        "fullTitle": "event previews GET /<event id>/preview [415L] must limit the desired size to the biggest standard size if too big",
        "duration": 113,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CWTQ] must serve the cached file if available",
        "fullTitle": "event previews GET /<event id>/preview [CWTQ] must serve the cached file if available",
        "duration": 55,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[2MME] must regenerate the cached file if obsolete",
        "fullTitle": "event previews GET /<event id>/preview [2MME] must regenerate the cached file if obsolete",
        "duration": 115,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[7Y91] must respond with \"no content\" if the event type is not supported",
        "fullTitle": "event previews GET /<event id>/preview [7Y91] must respond with \"no content\" if the event type is not supported",
        "duration": 10,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[61N8] must return a proper error if the event does not exist",
        "fullTitle": "event previews GET /<event id>/preview [61N8] must return a proper error if the event does not exist",
        "duration": 7,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VIJO] must forbid requests missing an access token",
        "fullTitle": "event previews GET /<event id>/preview [VIJO] must forbid requests missing an access token",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FAK4] must forbid requests with unauthorized accesses",
        "fullTitle": "event previews GET /<event id>/preview [FAK4] must forbid requests with unauthorized accesses",
        "duration": 13,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[QUM3] must return a proper error if event data is corrupted (no attachment object)",
        "fullTitle": "event previews GET /<event id>/preview [QUM3] must return a proper error if event data is corrupted (no attachment object)",
        "duration": 18,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[DQF6] must return a proper error if event data is corrupted (no attached file)",
        "fullTitle": "event previews GET /<event id>/preview [DQF6] must return a proper error if event data is corrupted (no attached file)",
        "duration": 17,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[GSDF] must work with animated GIFs too",
        "fullTitle": "event previews GET /<event id>/preview [GSDF] must work with animated GIFs too",
        "duration": 53,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[FUYE] must clean up cached previews not accessed for one week by default",
        "fullTitle": "event previews POST /clean-up-cache [FUYE] must clean up cached previews not accessed for one week by default",
        "duration": 401,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[G5JR] must ignore files with no readable extended attribute",
        "fullTitle": "event previews POST /clean-up-cache [G5JR] must ignore files with no readable extended attribute",
        "duration": 343,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[E5MW] should return OK",
        "fullTitle": "(index) OPTIONS / [E5MW] should return OK",
        "duration": 3,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "componentName": "previews-server"
  },
  {
    "stats": {
      "suites": 2,
      "tests": 3,
      "passes": 3,
      "pending": 0,
      "failures": 0,
      "start": "2019-05-07T06:16:13.503Z",
      "end": "2019-05-07T06:16:13.579Z",
      "duration": 76
    },
    "tests": [
      {
        "title": "[GZFK] making a call",
        "fullTitle": "Base API [GZFK] making a call",
        "duration": 26,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V7MJ] failing a call (server-side)",
        "fullTitle": "Base API [V7MJ] failing a call (server-side)",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0YBR] compiles a .proto 3 syntax file into a set of flow-type interfaces",
        "fullTitle": "Type Compilation [0YBR] compiles a .proto 3 syntax file into a set of flow-type interfaces",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "pending": [],
    "failures": [],
    "passes": [
      {
        "title": "[GZFK] making a call",
        "fullTitle": "Base API [GZFK] making a call",
        "duration": 26,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[V7MJ] failing a call (server-side)",
        "fullTitle": "Base API [V7MJ] failing a call (server-side)",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[0YBR] compiles a .proto 3 syntax file into a set of flow-type interfaces",
        "fullTitle": "Type Compilation [0YBR] compiles a .proto 3 syntax file into a set of flow-type interfaces",
        "duration": 4,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "componentName": "tprpc"
  },
  {
    "stats": {
      "suites": 7,
      "tests": 10,
      "passes": 10,
      "pending": 0,
      "failures": 0,
      "start": "2019-05-07T06:16:13.850Z",
      "end": "2019-05-07T06:16:13.860Z",
      "duration": 10
    },
    "tests": [
      {
        "title": "[32CB] must build a correct tree for a given consistent array",
        "fullTitle": "tree utils buildTree() [32CB] must build a correct tree for a given consistent array",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VVVS] must throw an error if objects do not contain the necessary properties",
        "fullTitle": "tree utils buildTree() [VVVS] must throw an error if objects do not contain the necessary properties",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CEUF] must throw an error if the object in argument is not an array",
        "fullTitle": "tree utils buildTree() [CEUF] must throw an error if the object in argument is not an array",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[11JJ] must build a correct array for a given tree",
        "fullTitle": "tree utils flattenTree() [11JJ] must build a correct array for a given tree",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OVJM] must throw an error if the object in argument is not an array",
        "fullTitle": "tree utils flattenTree() [OVJM] must throw an error if the object in argument is not an array",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S1N0] must return the first item matching the given iterator function",
        "fullTitle": "tree utils findInTree() [S1N0] must return the first item matching the given iterator function",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SI6L] must return null if no item matches the given iterator function",
        "fullTitle": "tree utils findInTree() [SI6L] must return null if no item matches the given iterator function",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YIE6] must return only items matching the given iterator function",
        "fullTitle": "tree utils filterTree() [YIE6] must return only items matching the given iterator function",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AU44] must return an array with values matching the iterator function for each item in the tree",
        "fullTitle": "tree utils collect() [AU44] must return an array with values matching the iterator function for each item in the tree",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PFJP] must return an array with the ids passed in argument plus those of all their descendants",
        "fullTitle": "tree utils expandIds() [PFJP] must return an array with the ids passed in argument plus those of all their descendants",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "pending": [],
    "failures": [],
    "passes": [
      {
        "title": "[32CB] must build a correct tree for a given consistent array",
        "fullTitle": "tree utils buildTree() [32CB] must build a correct tree for a given consistent array",
        "duration": 2,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[VVVS] must throw an error if objects do not contain the necessary properties",
        "fullTitle": "tree utils buildTree() [VVVS] must throw an error if objects do not contain the necessary properties",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[CEUF] must throw an error if the object in argument is not an array",
        "fullTitle": "tree utils buildTree() [CEUF] must throw an error if the object in argument is not an array",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[11JJ] must build a correct array for a given tree",
        "fullTitle": "tree utils flattenTree() [11JJ] must build a correct array for a given tree",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[OVJM] must throw an error if the object in argument is not an array",
        "fullTitle": "tree utils flattenTree() [OVJM] must throw an error if the object in argument is not an array",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[S1N0] must return the first item matching the given iterator function",
        "fullTitle": "tree utils findInTree() [S1N0] must return the first item matching the given iterator function",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[SI6L] must return null if no item matches the given iterator function",
        "fullTitle": "tree utils findInTree() [SI6L] must return null if no item matches the given iterator function",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[YIE6] must return only items matching the given iterator function",
        "fullTitle": "tree utils filterTree() [YIE6] must return only items matching the given iterator function",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[AU44] must return an array with values matching the iterator function for each item in the tree",
        "fullTitle": "tree utils collect() [AU44] must return an array with values matching the iterator function for each item in the tree",
        "duration": 1,
        "currentRetry": 0,
        "err": {}
      },
      {
        "title": "[PFJP] must return an array with the ids passed in argument plus those of all their descendants",
        "fullTitle": "tree utils expandIds() [PFJP] must return an array with the ids passed in argument plus those of all their descendants",
        "duration": 0,
        "currentRetry": 0,
        "err": {}
      }
    ],
    "componentName": "utils"
  }
]